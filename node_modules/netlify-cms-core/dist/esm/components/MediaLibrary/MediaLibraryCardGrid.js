"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactWaypoint = require("react-waypoint");

var _MediaLibraryCard = _interopRequireDefault(require("./MediaLibraryCard"));

var _immutable = require("immutable");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _reactWindow = require("react-window");

var _reactVirtualizedAutoSizer = _interopRequireDefault(require("react-virtualized-auto-sizer"));

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

function CardWrapper(props) {
  const {
    rowIndex,
    columnIndex,
    style,
    data: {
      mediaItems,
      isSelectedFile,
      onAssetClick,
      cardDraftText,
      cardWidth,
      cardHeight,
      isPrivate,
      displayURLs,
      loadDisplayURL,
      columnCount,
      gutter
    }
  } = props;
  const index = rowIndex * columnCount + columnIndex;

  if (index >= mediaItems.length) {
    return null;
  }

  const file = mediaItems[index];
  return (0, _core.jsx)("div", {
    style: _objectSpread(_objectSpread({}, style), {}, {
      left: style.left + gutter * columnIndex,
      top: style.top + gutter,
      width: style.width - gutter,
      height: style.height - gutter
    })
  }, (0, _core.jsx)(_MediaLibraryCard.default, {
    key: file.key,
    isSelected: isSelectedFile(file),
    text: file.name,
    onClick: () => onAssetClick(file),
    isDraft: file.draft,
    draftText: cardDraftText,
    width: cardWidth,
    height: cardHeight,
    margin: '0px',
    isPrivate: isPrivate,
    displayURL: displayURLs.get(file.id, file.url ? (0, _immutable.Map)({
      url: file.url
    }) : (0, _immutable.Map)()),
    loadDisplayURL: () => loadDisplayURL(file),
    type: file.type,
    isViewableImage: file.isViewableImage
  }));
}

function VirtualizedGrid(props) {
  const {
    mediaItems,
    setScrollContainerRef
  } = props;
  return (0, _core.jsx)(CardGridContainer, {
    ref: setScrollContainerRef
  }, (0, _core.jsx)(_reactVirtualizedAutoSizer.default, null, ({
    height,
    width
  }) => {
    const cardWidth = parseInt(props.cardWidth, 10);
    const cardHeight = parseInt(props.cardHeight, 10);
    const gutter = parseInt(props.cardMargin, 10);
    const columnWidth = cardWidth + gutter;
    const rowHeight = cardHeight + gutter;
    const columnCount = Math.floor(width / columnWidth);
    const rowCount = Math.ceil(mediaItems.length / columnCount);
    return (0, _core.jsx)(_reactWindow.FixedSizeGrid, {
      columnCount: columnCount,
      columnWidth: columnWidth,
      rowCount: rowCount,
      rowHeight: rowHeight,
      width: width,
      height: height,
      itemData: _objectSpread(_objectSpread({}, props), {}, {
        gutter,
        columnCount
      })
    }, CardWrapper);
  }));
}

function PaginatedGrid({
  setScrollContainerRef,
  mediaItems,
  isSelectedFile,
  onAssetClick,
  cardDraftText,
  cardWidth,
  cardHeight,
  cardMargin,
  isPrivate,
  displayURLs,
  loadDisplayURL,
  canLoadMore,
  onLoadMore,
  isPaginating,
  paginatingMessage
}) {
  return (0, _core.jsx)(CardGridContainer, {
    ref: setScrollContainerRef
  }, (0, _core.jsx)(CardGrid, null, mediaItems.map(file => (0, _core.jsx)(_MediaLibraryCard.default, {
    key: file.key,
    isSelected: isSelectedFile(file),
    text: file.name,
    onClick: () => onAssetClick(file),
    isDraft: file.draft,
    draftText: cardDraftText,
    width: cardWidth,
    height: cardHeight,
    margin: cardMargin,
    isPrivate: isPrivate,
    displayURL: displayURLs.get(file.id, file.url ? (0, _immutable.Map)({
      url: file.url
    }) : (0, _immutable.Map)()),
    loadDisplayURL: () => loadDisplayURL(file),
    type: file.type,
    isViewableImage: file.isViewableImage
  })), !canLoadMore ? null : (0, _core.jsx)(_reactWaypoint.Waypoint, {
    onEnter: onLoadMore
  })), !isPaginating ? null : (0, _core.jsx)(PaginatingMessage, {
    isPrivate: isPrivate
  }, paginatingMessage));
}

const CardGridContainer = (0, _styledBase.default)("div", {
  target: "e11970yf0",
  label: "CardGridContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1wzx962",
  styles: "overflow-y:auto;overflow-x:hidden;"
} : {
  name: "1wzx962",
  styles: "overflow-y:auto;overflow-x:hidden;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpSm9DIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgV2F5cG9pbnQgfSBmcm9tICdyZWFjdC13YXlwb2ludCc7XG5pbXBvcnQgTWVkaWFMaWJyYXJ5Q2FyZCBmcm9tICcuL01lZGlhTGlicmFyeUNhcmQnO1xuaW1wb3J0IHsgTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgRml4ZWRTaXplR3JpZCBhcyBHcmlkIH0gZnJvbSAncmVhY3Qtd2luZG93JztcbmltcG9ydCBBdXRvU2l6ZXIgZnJvbSAncmVhY3QtdmlydHVhbGl6ZWQtYXV0by1zaXplcic7XG5cbmZ1bmN0aW9uIENhcmRXcmFwcGVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICByb3dJbmRleCxcbiAgICBjb2x1bW5JbmRleCxcbiAgICBzdHlsZSxcbiAgICBkYXRhOiB7XG4gICAgICBtZWRpYUl0ZW1zLFxuICAgICAgaXNTZWxlY3RlZEZpbGUsXG4gICAgICBvbkFzc2V0Q2xpY2ssXG4gICAgICBjYXJkRHJhZnRUZXh0LFxuICAgICAgY2FyZFdpZHRoLFxuICAgICAgY2FyZEhlaWdodCxcbiAgICAgIGlzUHJpdmF0ZSxcbiAgICAgIGRpc3BsYXlVUkxzLFxuICAgICAgbG9hZERpc3BsYXlVUkwsXG4gICAgICBjb2x1bW5Db3VudCxcbiAgICAgIGd1dHRlcixcbiAgICB9LFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGluZGV4ID0gcm93SW5kZXggKiBjb2x1bW5Db3VudCArIGNvbHVtbkluZGV4O1xuICBpZiAoaW5kZXggPj0gbWVkaWFJdGVtcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBmaWxlID0gbWVkaWFJdGVtc1tpbmRleF07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBzdHlsZT17e1xuICAgICAgICAuLi5zdHlsZSxcbiAgICAgICAgbGVmdDogc3R5bGUubGVmdCArIGd1dHRlciAqIGNvbHVtbkluZGV4LFxuICAgICAgICB0b3A6IHN0eWxlLnRvcCArIGd1dHRlcixcbiAgICAgICAgd2lkdGg6IHN0eWxlLndpZHRoIC0gZ3V0dGVyLFxuICAgICAgICBoZWlnaHQ6IHN0eWxlLmhlaWdodCAtIGd1dHRlcixcbiAgICAgIH19XG4gICAgPlxuICAgICAgPE1lZGlhTGlicmFyeUNhcmRcbiAgICAgICAga2V5PXtmaWxlLmtleX1cbiAgICAgICAgaXNTZWxlY3RlZD17aXNTZWxlY3RlZEZpbGUoZmlsZSl9XG4gICAgICAgIHRleHQ9e2ZpbGUubmFtZX1cbiAgICAgICAgb25DbGljaz17KCkgPT4gb25Bc3NldENsaWNrKGZpbGUpfVxuICAgICAgICBpc0RyYWZ0PXtmaWxlLmRyYWZ0fVxuICAgICAgICBkcmFmdFRleHQ9e2NhcmREcmFmdFRleHR9XG4gICAgICAgIHdpZHRoPXtjYXJkV2lkdGh9XG4gICAgICAgIGhlaWdodD17Y2FyZEhlaWdodH1cbiAgICAgICAgbWFyZ2luPXsnMHB4J31cbiAgICAgICAgaXNQcml2YXRlPXtpc1ByaXZhdGV9XG4gICAgICAgIGRpc3BsYXlVUkw9e2Rpc3BsYXlVUkxzLmdldChmaWxlLmlkLCBmaWxlLnVybCA/IE1hcCh7IHVybDogZmlsZS51cmwgfSkgOiBNYXAoKSl9XG4gICAgICAgIGxvYWREaXNwbGF5VVJMPXsoKSA9PiBsb2FkRGlzcGxheVVSTChmaWxlKX1cbiAgICAgICAgdHlwZT17ZmlsZS50eXBlfVxuICAgICAgICBpc1ZpZXdhYmxlSW1hZ2U9e2ZpbGUuaXNWaWV3YWJsZUltYWdlfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gVmlydHVhbGl6ZWRHcmlkKHByb3BzKSB7XG4gIGNvbnN0IHsgbWVkaWFJdGVtcywgc2V0U2Nyb2xsQ29udGFpbmVyUmVmIH0gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDxDYXJkR3JpZENvbnRhaW5lciByZWY9e3NldFNjcm9sbENvbnRhaW5lclJlZn0+XG4gICAgICA8QXV0b1NpemVyPlxuICAgICAgICB7KHsgaGVpZ2h0LCB3aWR0aCB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgY2FyZFdpZHRoID0gcGFyc2VJbnQocHJvcHMuY2FyZFdpZHRoLCAxMCk7XG4gICAgICAgICAgY29uc3QgY2FyZEhlaWdodCA9IHBhcnNlSW50KHByb3BzLmNhcmRIZWlnaHQsIDEwKTtcbiAgICAgICAgICBjb25zdCBndXR0ZXIgPSBwYXJzZUludChwcm9wcy5jYXJkTWFyZ2luLCAxMCk7XG4gICAgICAgICAgY29uc3QgY29sdW1uV2lkdGggPSBjYXJkV2lkdGggKyBndXR0ZXI7XG4gICAgICAgICAgY29uc3Qgcm93SGVpZ2h0ID0gY2FyZEhlaWdodCArIGd1dHRlcjtcbiAgICAgICAgICBjb25zdCBjb2x1bW5Db3VudCA9IE1hdGguZmxvb3Iod2lkdGggLyBjb2x1bW5XaWR0aCk7XG4gICAgICAgICAgY29uc3Qgcm93Q291bnQgPSBNYXRoLmNlaWwobWVkaWFJdGVtcy5sZW5ndGggLyBjb2x1bW5Db3VudCk7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxHcmlkXG4gICAgICAgICAgICAgIGNvbHVtbkNvdW50PXtjb2x1bW5Db3VudH1cbiAgICAgICAgICAgICAgY29sdW1uV2lkdGg9e2NvbHVtbldpZHRofVxuICAgICAgICAgICAgICByb3dDb3VudD17cm93Q291bnR9XG4gICAgICAgICAgICAgIHJvd0hlaWdodD17cm93SGVpZ2h0fVxuICAgICAgICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICAgICAgICBpdGVtRGF0YT17eyAuLi5wcm9wcywgZ3V0dGVyLCBjb2x1bW5Db3VudCB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Q2FyZFdyYXBwZXJ9XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvQXV0b1NpemVyPlxuICAgIDwvQ2FyZEdyaWRDb250YWluZXI+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFBhZ2luYXRlZEdyaWQoe1xuICBzZXRTY3JvbGxDb250YWluZXJSZWYsXG4gIG1lZGlhSXRlbXMsXG4gIGlzU2VsZWN0ZWRGaWxlLFxuICBvbkFzc2V0Q2xpY2ssXG4gIGNhcmREcmFmdFRleHQsXG4gIGNhcmRXaWR0aCxcbiAgY2FyZEhlaWdodCxcbiAgY2FyZE1hcmdpbixcbiAgaXNQcml2YXRlLFxuICBkaXNwbGF5VVJMcyxcbiAgbG9hZERpc3BsYXlVUkwsXG4gIGNhbkxvYWRNb3JlLFxuICBvbkxvYWRNb3JlLFxuICBpc1BhZ2luYXRpbmcsXG4gIHBhZ2luYXRpbmdNZXNzYWdlLFxufSkge1xuICByZXR1cm4gKFxuICAgIDxDYXJkR3JpZENvbnRhaW5lciByZWY9e3NldFNjcm9sbENvbnRhaW5lclJlZn0+XG4gICAgICA8Q2FyZEdyaWQ+XG4gICAgICAgIHttZWRpYUl0ZW1zLm1hcChmaWxlID0+IChcbiAgICAgICAgICA8TWVkaWFMaWJyYXJ5Q2FyZFxuICAgICAgICAgICAga2V5PXtmaWxlLmtleX1cbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWRGaWxlKGZpbGUpfVxuICAgICAgICAgICAgdGV4dD17ZmlsZS5uYW1lfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25Bc3NldENsaWNrKGZpbGUpfVxuICAgICAgICAgICAgaXNEcmFmdD17ZmlsZS5kcmFmdH1cbiAgICAgICAgICAgIGRyYWZ0VGV4dD17Y2FyZERyYWZ0VGV4dH1cbiAgICAgICAgICAgIHdpZHRoPXtjYXJkV2lkdGh9XG4gICAgICAgICAgICBoZWlnaHQ9e2NhcmRIZWlnaHR9XG4gICAgICAgICAgICBtYXJnaW49e2NhcmRNYXJnaW59XG4gICAgICAgICAgICBpc1ByaXZhdGU9e2lzUHJpdmF0ZX1cbiAgICAgICAgICAgIGRpc3BsYXlVUkw9e2Rpc3BsYXlVUkxzLmdldChmaWxlLmlkLCBmaWxlLnVybCA/IE1hcCh7IHVybDogZmlsZS51cmwgfSkgOiBNYXAoKSl9XG4gICAgICAgICAgICBsb2FkRGlzcGxheVVSTD17KCkgPT4gbG9hZERpc3BsYXlVUkwoZmlsZSl9XG4gICAgICAgICAgICB0eXBlPXtmaWxlLnR5cGV9XG4gICAgICAgICAgICBpc1ZpZXdhYmxlSW1hZ2U9e2ZpbGUuaXNWaWV3YWJsZUltYWdlfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgICB7IWNhbkxvYWRNb3JlID8gbnVsbCA6IDxXYXlwb2ludCBvbkVudGVyPXtvbkxvYWRNb3JlfSAvPn1cbiAgICAgIDwvQ2FyZEdyaWQ+XG4gICAgICB7IWlzUGFnaW5hdGluZyA/IG51bGwgOiAoXG4gICAgICAgIDxQYWdpbmF0aW5nTWVzc2FnZSBpc1ByaXZhdGU9e2lzUHJpdmF0ZX0+e3BhZ2luYXRpbmdNZXNzYWdlfTwvUGFnaW5hdGluZ01lc3NhZ2U+XG4gICAgICApfVxuICAgIDwvQ2FyZEdyaWRDb250YWluZXI+XG4gICk7XG59XG5cbmNvbnN0IENhcmRHcmlkQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuYDtcblxuY29uc3QgQ2FyZEdyaWQgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG5cbiAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xuICBtYXJnaW4tcmlnaHQ6IC0xMHB4O1xuYDtcblxuY29uc3QgUGFnaW5hdGluZ01lc3NhZ2UgPSBzdHlsZWQuaDFgXG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLmlzUHJpdmF0ZSAmJiBjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbmA7XG5cbmZ1bmN0aW9uIE1lZGlhTGlicmFyeUNhcmRHcmlkKHByb3BzKSB7XG4gIGNvbnN0IHsgY2FuTG9hZE1vcmUsIGlzUGFnaW5hdGluZyB9ID0gcHJvcHM7XG4gIGlmIChjYW5Mb2FkTW9yZSB8fCBpc1BhZ2luYXRpbmcpIHtcbiAgICByZXR1cm4gPFBhZ2luYXRlZEdyaWQgey4uLnByb3BzfSAvPjtcbiAgfVxuICByZXR1cm4gPFZpcnR1YWxpemVkR3JpZCB7Li4ucHJvcHN9IC8+O1xufVxuXG5NZWRpYUxpYnJhcnlDYXJkR3JpZC5wcm9wVHlwZXMgPSB7XG4gIHNldFNjcm9sbENvbnRhaW5lclJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbWVkaWFJdGVtczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGRpc3BsYXlVUkw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBrZXk6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIGRyYWZ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICB9KSxcbiAgKS5pc1JlcXVpcmVkLFxuICBpc1NlbGVjdGVkRmlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25Bc3NldENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBjYW5Mb2FkTW9yZTogUHJvcFR5cGVzLmJvb2wsXG4gIG9uTG9hZE1vcmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzUGFnaW5hdGluZzogUHJvcFR5cGVzLmJvb2wsXG4gIHBhZ2luYXRpbmdNZXNzYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjYXJkRHJhZnRUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNhcmRXaWR0aDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjYXJkTWFyZ2luOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGxvYWREaXNwbGF5VVJMOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1ByaXZhdGU6IFByb3BUeXBlcy5ib29sLFxuICBkaXNwbGF5VVJMczogUHJvcFR5cGVzLmluc3RhbmNlT2YoTWFwKS5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVkaWFMaWJyYXJ5Q2FyZEdyaWQ7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CardGrid = (0, _styledBase.default)("div", {
  target: "e11970yf1",
  label: "CardGrid"
})(process.env.NODE_ENV === "production" ? {
  name: "wbkx89",
  styles: "display:flex;flex-wrap:wrap;margin-left:-10px;margin-right:-10px;"
} : {
  name: "wbkx89",
  styles: "display:flex;flex-wrap:wrap;margin-left:-10px;margin-right:-10px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzSjJCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgV2F5cG9pbnQgfSBmcm9tICdyZWFjdC13YXlwb2ludCc7XG5pbXBvcnQgTWVkaWFMaWJyYXJ5Q2FyZCBmcm9tICcuL01lZGlhTGlicmFyeUNhcmQnO1xuaW1wb3J0IHsgTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgRml4ZWRTaXplR3JpZCBhcyBHcmlkIH0gZnJvbSAncmVhY3Qtd2luZG93JztcbmltcG9ydCBBdXRvU2l6ZXIgZnJvbSAncmVhY3QtdmlydHVhbGl6ZWQtYXV0by1zaXplcic7XG5cbmZ1bmN0aW9uIENhcmRXcmFwcGVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICByb3dJbmRleCxcbiAgICBjb2x1bW5JbmRleCxcbiAgICBzdHlsZSxcbiAgICBkYXRhOiB7XG4gICAgICBtZWRpYUl0ZW1zLFxuICAgICAgaXNTZWxlY3RlZEZpbGUsXG4gICAgICBvbkFzc2V0Q2xpY2ssXG4gICAgICBjYXJkRHJhZnRUZXh0LFxuICAgICAgY2FyZFdpZHRoLFxuICAgICAgY2FyZEhlaWdodCxcbiAgICAgIGlzUHJpdmF0ZSxcbiAgICAgIGRpc3BsYXlVUkxzLFxuICAgICAgbG9hZERpc3BsYXlVUkwsXG4gICAgICBjb2x1bW5Db3VudCxcbiAgICAgIGd1dHRlcixcbiAgICB9LFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGluZGV4ID0gcm93SW5kZXggKiBjb2x1bW5Db3VudCArIGNvbHVtbkluZGV4O1xuICBpZiAoaW5kZXggPj0gbWVkaWFJdGVtcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBmaWxlID0gbWVkaWFJdGVtc1tpbmRleF07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBzdHlsZT17e1xuICAgICAgICAuLi5zdHlsZSxcbiAgICAgICAgbGVmdDogc3R5bGUubGVmdCArIGd1dHRlciAqIGNvbHVtbkluZGV4LFxuICAgICAgICB0b3A6IHN0eWxlLnRvcCArIGd1dHRlcixcbiAgICAgICAgd2lkdGg6IHN0eWxlLndpZHRoIC0gZ3V0dGVyLFxuICAgICAgICBoZWlnaHQ6IHN0eWxlLmhlaWdodCAtIGd1dHRlcixcbiAgICAgIH19XG4gICAgPlxuICAgICAgPE1lZGlhTGlicmFyeUNhcmRcbiAgICAgICAga2V5PXtmaWxlLmtleX1cbiAgICAgICAgaXNTZWxlY3RlZD17aXNTZWxlY3RlZEZpbGUoZmlsZSl9XG4gICAgICAgIHRleHQ9e2ZpbGUubmFtZX1cbiAgICAgICAgb25DbGljaz17KCkgPT4gb25Bc3NldENsaWNrKGZpbGUpfVxuICAgICAgICBpc0RyYWZ0PXtmaWxlLmRyYWZ0fVxuICAgICAgICBkcmFmdFRleHQ9e2NhcmREcmFmdFRleHR9XG4gICAgICAgIHdpZHRoPXtjYXJkV2lkdGh9XG4gICAgICAgIGhlaWdodD17Y2FyZEhlaWdodH1cbiAgICAgICAgbWFyZ2luPXsnMHB4J31cbiAgICAgICAgaXNQcml2YXRlPXtpc1ByaXZhdGV9XG4gICAgICAgIGRpc3BsYXlVUkw9e2Rpc3BsYXlVUkxzLmdldChmaWxlLmlkLCBmaWxlLnVybCA/IE1hcCh7IHVybDogZmlsZS51cmwgfSkgOiBNYXAoKSl9XG4gICAgICAgIGxvYWREaXNwbGF5VVJMPXsoKSA9PiBsb2FkRGlzcGxheVVSTChmaWxlKX1cbiAgICAgICAgdHlwZT17ZmlsZS50eXBlfVxuICAgICAgICBpc1ZpZXdhYmxlSW1hZ2U9e2ZpbGUuaXNWaWV3YWJsZUltYWdlfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gVmlydHVhbGl6ZWRHcmlkKHByb3BzKSB7XG4gIGNvbnN0IHsgbWVkaWFJdGVtcywgc2V0U2Nyb2xsQ29udGFpbmVyUmVmIH0gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDxDYXJkR3JpZENvbnRhaW5lciByZWY9e3NldFNjcm9sbENvbnRhaW5lclJlZn0+XG4gICAgICA8QXV0b1NpemVyPlxuICAgICAgICB7KHsgaGVpZ2h0LCB3aWR0aCB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgY2FyZFdpZHRoID0gcGFyc2VJbnQocHJvcHMuY2FyZFdpZHRoLCAxMCk7XG4gICAgICAgICAgY29uc3QgY2FyZEhlaWdodCA9IHBhcnNlSW50KHByb3BzLmNhcmRIZWlnaHQsIDEwKTtcbiAgICAgICAgICBjb25zdCBndXR0ZXIgPSBwYXJzZUludChwcm9wcy5jYXJkTWFyZ2luLCAxMCk7XG4gICAgICAgICAgY29uc3QgY29sdW1uV2lkdGggPSBjYXJkV2lkdGggKyBndXR0ZXI7XG4gICAgICAgICAgY29uc3Qgcm93SGVpZ2h0ID0gY2FyZEhlaWdodCArIGd1dHRlcjtcbiAgICAgICAgICBjb25zdCBjb2x1bW5Db3VudCA9IE1hdGguZmxvb3Iod2lkdGggLyBjb2x1bW5XaWR0aCk7XG4gICAgICAgICAgY29uc3Qgcm93Q291bnQgPSBNYXRoLmNlaWwobWVkaWFJdGVtcy5sZW5ndGggLyBjb2x1bW5Db3VudCk7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxHcmlkXG4gICAgICAgICAgICAgIGNvbHVtbkNvdW50PXtjb2x1bW5Db3VudH1cbiAgICAgICAgICAgICAgY29sdW1uV2lkdGg9e2NvbHVtbldpZHRofVxuICAgICAgICAgICAgICByb3dDb3VudD17cm93Q291bnR9XG4gICAgICAgICAgICAgIHJvd0hlaWdodD17cm93SGVpZ2h0fVxuICAgICAgICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICAgICAgICBpdGVtRGF0YT17eyAuLi5wcm9wcywgZ3V0dGVyLCBjb2x1bW5Db3VudCB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Q2FyZFdyYXBwZXJ9XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvQXV0b1NpemVyPlxuICAgIDwvQ2FyZEdyaWRDb250YWluZXI+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFBhZ2luYXRlZEdyaWQoe1xuICBzZXRTY3JvbGxDb250YWluZXJSZWYsXG4gIG1lZGlhSXRlbXMsXG4gIGlzU2VsZWN0ZWRGaWxlLFxuICBvbkFzc2V0Q2xpY2ssXG4gIGNhcmREcmFmdFRleHQsXG4gIGNhcmRXaWR0aCxcbiAgY2FyZEhlaWdodCxcbiAgY2FyZE1hcmdpbixcbiAgaXNQcml2YXRlLFxuICBkaXNwbGF5VVJMcyxcbiAgbG9hZERpc3BsYXlVUkwsXG4gIGNhbkxvYWRNb3JlLFxuICBvbkxvYWRNb3JlLFxuICBpc1BhZ2luYXRpbmcsXG4gIHBhZ2luYXRpbmdNZXNzYWdlLFxufSkge1xuICByZXR1cm4gKFxuICAgIDxDYXJkR3JpZENvbnRhaW5lciByZWY9e3NldFNjcm9sbENvbnRhaW5lclJlZn0+XG4gICAgICA8Q2FyZEdyaWQ+XG4gICAgICAgIHttZWRpYUl0ZW1zLm1hcChmaWxlID0+IChcbiAgICAgICAgICA8TWVkaWFMaWJyYXJ5Q2FyZFxuICAgICAgICAgICAga2V5PXtmaWxlLmtleX1cbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWRGaWxlKGZpbGUpfVxuICAgICAgICAgICAgdGV4dD17ZmlsZS5uYW1lfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25Bc3NldENsaWNrKGZpbGUpfVxuICAgICAgICAgICAgaXNEcmFmdD17ZmlsZS5kcmFmdH1cbiAgICAgICAgICAgIGRyYWZ0VGV4dD17Y2FyZERyYWZ0VGV4dH1cbiAgICAgICAgICAgIHdpZHRoPXtjYXJkV2lkdGh9XG4gICAgICAgICAgICBoZWlnaHQ9e2NhcmRIZWlnaHR9XG4gICAgICAgICAgICBtYXJnaW49e2NhcmRNYXJnaW59XG4gICAgICAgICAgICBpc1ByaXZhdGU9e2lzUHJpdmF0ZX1cbiAgICAgICAgICAgIGRpc3BsYXlVUkw9e2Rpc3BsYXlVUkxzLmdldChmaWxlLmlkLCBmaWxlLnVybCA/IE1hcCh7IHVybDogZmlsZS51cmwgfSkgOiBNYXAoKSl9XG4gICAgICAgICAgICBsb2FkRGlzcGxheVVSTD17KCkgPT4gbG9hZERpc3BsYXlVUkwoZmlsZSl9XG4gICAgICAgICAgICB0eXBlPXtmaWxlLnR5cGV9XG4gICAgICAgICAgICBpc1ZpZXdhYmxlSW1hZ2U9e2ZpbGUuaXNWaWV3YWJsZUltYWdlfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgICB7IWNhbkxvYWRNb3JlID8gbnVsbCA6IDxXYXlwb2ludCBvbkVudGVyPXtvbkxvYWRNb3JlfSAvPn1cbiAgICAgIDwvQ2FyZEdyaWQ+XG4gICAgICB7IWlzUGFnaW5hdGluZyA/IG51bGwgOiAoXG4gICAgICAgIDxQYWdpbmF0aW5nTWVzc2FnZSBpc1ByaXZhdGU9e2lzUHJpdmF0ZX0+e3BhZ2luYXRpbmdNZXNzYWdlfTwvUGFnaW5hdGluZ01lc3NhZ2U+XG4gICAgICApfVxuICAgIDwvQ2FyZEdyaWRDb250YWluZXI+XG4gICk7XG59XG5cbmNvbnN0IENhcmRHcmlkQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuYDtcblxuY29uc3QgQ2FyZEdyaWQgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG5cbiAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xuICBtYXJnaW4tcmlnaHQ6IC0xMHB4O1xuYDtcblxuY29uc3QgUGFnaW5hdGluZ01lc3NhZ2UgPSBzdHlsZWQuaDFgXG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLmlzUHJpdmF0ZSAmJiBjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbmA7XG5cbmZ1bmN0aW9uIE1lZGlhTGlicmFyeUNhcmRHcmlkKHByb3BzKSB7XG4gIGNvbnN0IHsgY2FuTG9hZE1vcmUsIGlzUGFnaW5hdGluZyB9ID0gcHJvcHM7XG4gIGlmIChjYW5Mb2FkTW9yZSB8fCBpc1BhZ2luYXRpbmcpIHtcbiAgICByZXR1cm4gPFBhZ2luYXRlZEdyaWQgey4uLnByb3BzfSAvPjtcbiAgfVxuICByZXR1cm4gPFZpcnR1YWxpemVkR3JpZCB7Li4ucHJvcHN9IC8+O1xufVxuXG5NZWRpYUxpYnJhcnlDYXJkR3JpZC5wcm9wVHlwZXMgPSB7XG4gIHNldFNjcm9sbENvbnRhaW5lclJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbWVkaWFJdGVtczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGRpc3BsYXlVUkw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBrZXk6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIGRyYWZ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICB9KSxcbiAgKS5pc1JlcXVpcmVkLFxuICBpc1NlbGVjdGVkRmlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25Bc3NldENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBjYW5Mb2FkTW9yZTogUHJvcFR5cGVzLmJvb2wsXG4gIG9uTG9hZE1vcmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzUGFnaW5hdGluZzogUHJvcFR5cGVzLmJvb2wsXG4gIHBhZ2luYXRpbmdNZXNzYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjYXJkRHJhZnRUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNhcmRXaWR0aDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjYXJkTWFyZ2luOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGxvYWREaXNwbGF5VVJMOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1ByaXZhdGU6IFByb3BUeXBlcy5ib29sLFxuICBkaXNwbGF5VVJMczogUHJvcFR5cGVzLmluc3RhbmNlT2YoTWFwKS5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVkaWFMaWJyYXJ5Q2FyZEdyaWQ7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const PaginatingMessage = (0, _styledBase.default)("h1", {
  target: "e11970yf2",
  label: "PaginatingMessage"
})("color:", props => props.isPrivate && _netlifyCmsUiDefault.colors.textFieldBorder, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4Sm1DIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lZGlhTGlicmFyeS9NZWRpYUxpYnJhcnlDYXJkR3JpZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgV2F5cG9pbnQgfSBmcm9tICdyZWFjdC13YXlwb2ludCc7XG5pbXBvcnQgTWVkaWFMaWJyYXJ5Q2FyZCBmcm9tICcuL01lZGlhTGlicmFyeUNhcmQnO1xuaW1wb3J0IHsgTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgRml4ZWRTaXplR3JpZCBhcyBHcmlkIH0gZnJvbSAncmVhY3Qtd2luZG93JztcbmltcG9ydCBBdXRvU2l6ZXIgZnJvbSAncmVhY3QtdmlydHVhbGl6ZWQtYXV0by1zaXplcic7XG5cbmZ1bmN0aW9uIENhcmRXcmFwcGVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICByb3dJbmRleCxcbiAgICBjb2x1bW5JbmRleCxcbiAgICBzdHlsZSxcbiAgICBkYXRhOiB7XG4gICAgICBtZWRpYUl0ZW1zLFxuICAgICAgaXNTZWxlY3RlZEZpbGUsXG4gICAgICBvbkFzc2V0Q2xpY2ssXG4gICAgICBjYXJkRHJhZnRUZXh0LFxuICAgICAgY2FyZFdpZHRoLFxuICAgICAgY2FyZEhlaWdodCxcbiAgICAgIGlzUHJpdmF0ZSxcbiAgICAgIGRpc3BsYXlVUkxzLFxuICAgICAgbG9hZERpc3BsYXlVUkwsXG4gICAgICBjb2x1bW5Db3VudCxcbiAgICAgIGd1dHRlcixcbiAgICB9LFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGluZGV4ID0gcm93SW5kZXggKiBjb2x1bW5Db3VudCArIGNvbHVtbkluZGV4O1xuICBpZiAoaW5kZXggPj0gbWVkaWFJdGVtcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBmaWxlID0gbWVkaWFJdGVtc1tpbmRleF07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBzdHlsZT17e1xuICAgICAgICAuLi5zdHlsZSxcbiAgICAgICAgbGVmdDogc3R5bGUubGVmdCArIGd1dHRlciAqIGNvbHVtbkluZGV4LFxuICAgICAgICB0b3A6IHN0eWxlLnRvcCArIGd1dHRlcixcbiAgICAgICAgd2lkdGg6IHN0eWxlLndpZHRoIC0gZ3V0dGVyLFxuICAgICAgICBoZWlnaHQ6IHN0eWxlLmhlaWdodCAtIGd1dHRlcixcbiAgICAgIH19XG4gICAgPlxuICAgICAgPE1lZGlhTGlicmFyeUNhcmRcbiAgICAgICAga2V5PXtmaWxlLmtleX1cbiAgICAgICAgaXNTZWxlY3RlZD17aXNTZWxlY3RlZEZpbGUoZmlsZSl9XG4gICAgICAgIHRleHQ9e2ZpbGUubmFtZX1cbiAgICAgICAgb25DbGljaz17KCkgPT4gb25Bc3NldENsaWNrKGZpbGUpfVxuICAgICAgICBpc0RyYWZ0PXtmaWxlLmRyYWZ0fVxuICAgICAgICBkcmFmdFRleHQ9e2NhcmREcmFmdFRleHR9XG4gICAgICAgIHdpZHRoPXtjYXJkV2lkdGh9XG4gICAgICAgIGhlaWdodD17Y2FyZEhlaWdodH1cbiAgICAgICAgbWFyZ2luPXsnMHB4J31cbiAgICAgICAgaXNQcml2YXRlPXtpc1ByaXZhdGV9XG4gICAgICAgIGRpc3BsYXlVUkw9e2Rpc3BsYXlVUkxzLmdldChmaWxlLmlkLCBmaWxlLnVybCA/IE1hcCh7IHVybDogZmlsZS51cmwgfSkgOiBNYXAoKSl9XG4gICAgICAgIGxvYWREaXNwbGF5VVJMPXsoKSA9PiBsb2FkRGlzcGxheVVSTChmaWxlKX1cbiAgICAgICAgdHlwZT17ZmlsZS50eXBlfVxuICAgICAgICBpc1ZpZXdhYmxlSW1hZ2U9e2ZpbGUuaXNWaWV3YWJsZUltYWdlfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gVmlydHVhbGl6ZWRHcmlkKHByb3BzKSB7XG4gIGNvbnN0IHsgbWVkaWFJdGVtcywgc2V0U2Nyb2xsQ29udGFpbmVyUmVmIH0gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDxDYXJkR3JpZENvbnRhaW5lciByZWY9e3NldFNjcm9sbENvbnRhaW5lclJlZn0+XG4gICAgICA8QXV0b1NpemVyPlxuICAgICAgICB7KHsgaGVpZ2h0LCB3aWR0aCB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgY2FyZFdpZHRoID0gcGFyc2VJbnQocHJvcHMuY2FyZFdpZHRoLCAxMCk7XG4gICAgICAgICAgY29uc3QgY2FyZEhlaWdodCA9IHBhcnNlSW50KHByb3BzLmNhcmRIZWlnaHQsIDEwKTtcbiAgICAgICAgICBjb25zdCBndXR0ZXIgPSBwYXJzZUludChwcm9wcy5jYXJkTWFyZ2luLCAxMCk7XG4gICAgICAgICAgY29uc3QgY29sdW1uV2lkdGggPSBjYXJkV2lkdGggKyBndXR0ZXI7XG4gICAgICAgICAgY29uc3Qgcm93SGVpZ2h0ID0gY2FyZEhlaWdodCArIGd1dHRlcjtcbiAgICAgICAgICBjb25zdCBjb2x1bW5Db3VudCA9IE1hdGguZmxvb3Iod2lkdGggLyBjb2x1bW5XaWR0aCk7XG4gICAgICAgICAgY29uc3Qgcm93Q291bnQgPSBNYXRoLmNlaWwobWVkaWFJdGVtcy5sZW5ndGggLyBjb2x1bW5Db3VudCk7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxHcmlkXG4gICAgICAgICAgICAgIGNvbHVtbkNvdW50PXtjb2x1bW5Db3VudH1cbiAgICAgICAgICAgICAgY29sdW1uV2lkdGg9e2NvbHVtbldpZHRofVxuICAgICAgICAgICAgICByb3dDb3VudD17cm93Q291bnR9XG4gICAgICAgICAgICAgIHJvd0hlaWdodD17cm93SGVpZ2h0fVxuICAgICAgICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICAgICAgICBpdGVtRGF0YT17eyAuLi5wcm9wcywgZ3V0dGVyLCBjb2x1bW5Db3VudCB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Q2FyZFdyYXBwZXJ9XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvQXV0b1NpemVyPlxuICAgIDwvQ2FyZEdyaWRDb250YWluZXI+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFBhZ2luYXRlZEdyaWQoe1xuICBzZXRTY3JvbGxDb250YWluZXJSZWYsXG4gIG1lZGlhSXRlbXMsXG4gIGlzU2VsZWN0ZWRGaWxlLFxuICBvbkFzc2V0Q2xpY2ssXG4gIGNhcmREcmFmdFRleHQsXG4gIGNhcmRXaWR0aCxcbiAgY2FyZEhlaWdodCxcbiAgY2FyZE1hcmdpbixcbiAgaXNQcml2YXRlLFxuICBkaXNwbGF5VVJMcyxcbiAgbG9hZERpc3BsYXlVUkwsXG4gIGNhbkxvYWRNb3JlLFxuICBvbkxvYWRNb3JlLFxuICBpc1BhZ2luYXRpbmcsXG4gIHBhZ2luYXRpbmdNZXNzYWdlLFxufSkge1xuICByZXR1cm4gKFxuICAgIDxDYXJkR3JpZENvbnRhaW5lciByZWY9e3NldFNjcm9sbENvbnRhaW5lclJlZn0+XG4gICAgICA8Q2FyZEdyaWQ+XG4gICAgICAgIHttZWRpYUl0ZW1zLm1hcChmaWxlID0+IChcbiAgICAgICAgICA8TWVkaWFMaWJyYXJ5Q2FyZFxuICAgICAgICAgICAga2V5PXtmaWxlLmtleX1cbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWRGaWxlKGZpbGUpfVxuICAgICAgICAgICAgdGV4dD17ZmlsZS5uYW1lfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25Bc3NldENsaWNrKGZpbGUpfVxuICAgICAgICAgICAgaXNEcmFmdD17ZmlsZS5kcmFmdH1cbiAgICAgICAgICAgIGRyYWZ0VGV4dD17Y2FyZERyYWZ0VGV4dH1cbiAgICAgICAgICAgIHdpZHRoPXtjYXJkV2lkdGh9XG4gICAgICAgICAgICBoZWlnaHQ9e2NhcmRIZWlnaHR9XG4gICAgICAgICAgICBtYXJnaW49e2NhcmRNYXJnaW59XG4gICAgICAgICAgICBpc1ByaXZhdGU9e2lzUHJpdmF0ZX1cbiAgICAgICAgICAgIGRpc3BsYXlVUkw9e2Rpc3BsYXlVUkxzLmdldChmaWxlLmlkLCBmaWxlLnVybCA/IE1hcCh7IHVybDogZmlsZS51cmwgfSkgOiBNYXAoKSl9XG4gICAgICAgICAgICBsb2FkRGlzcGxheVVSTD17KCkgPT4gbG9hZERpc3BsYXlVUkwoZmlsZSl9XG4gICAgICAgICAgICB0eXBlPXtmaWxlLnR5cGV9XG4gICAgICAgICAgICBpc1ZpZXdhYmxlSW1hZ2U9e2ZpbGUuaXNWaWV3YWJsZUltYWdlfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgICB7IWNhbkxvYWRNb3JlID8gbnVsbCA6IDxXYXlwb2ludCBvbkVudGVyPXtvbkxvYWRNb3JlfSAvPn1cbiAgICAgIDwvQ2FyZEdyaWQ+XG4gICAgICB7IWlzUGFnaW5hdGluZyA/IG51bGwgOiAoXG4gICAgICAgIDxQYWdpbmF0aW5nTWVzc2FnZSBpc1ByaXZhdGU9e2lzUHJpdmF0ZX0+e3BhZ2luYXRpbmdNZXNzYWdlfTwvUGFnaW5hdGluZ01lc3NhZ2U+XG4gICAgICApfVxuICAgIDwvQ2FyZEdyaWRDb250YWluZXI+XG4gICk7XG59XG5cbmNvbnN0IENhcmRHcmlkQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuYDtcblxuY29uc3QgQ2FyZEdyaWQgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG5cbiAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xuICBtYXJnaW4tcmlnaHQ6IC0xMHB4O1xuYDtcblxuY29uc3QgUGFnaW5hdGluZ01lc3NhZ2UgPSBzdHlsZWQuaDFgXG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLmlzUHJpdmF0ZSAmJiBjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbmA7XG5cbmZ1bmN0aW9uIE1lZGlhTGlicmFyeUNhcmRHcmlkKHByb3BzKSB7XG4gIGNvbnN0IHsgY2FuTG9hZE1vcmUsIGlzUGFnaW5hdGluZyB9ID0gcHJvcHM7XG4gIGlmIChjYW5Mb2FkTW9yZSB8fCBpc1BhZ2luYXRpbmcpIHtcbiAgICByZXR1cm4gPFBhZ2luYXRlZEdyaWQgey4uLnByb3BzfSAvPjtcbiAgfVxuICByZXR1cm4gPFZpcnR1YWxpemVkR3JpZCB7Li4ucHJvcHN9IC8+O1xufVxuXG5NZWRpYUxpYnJhcnlDYXJkR3JpZC5wcm9wVHlwZXMgPSB7XG4gIHNldFNjcm9sbENvbnRhaW5lclJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbWVkaWFJdGVtczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGRpc3BsYXlVUkw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBrZXk6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIGRyYWZ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICB9KSxcbiAgKS5pc1JlcXVpcmVkLFxuICBpc1NlbGVjdGVkRmlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25Bc3NldENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBjYW5Mb2FkTW9yZTogUHJvcFR5cGVzLmJvb2wsXG4gIG9uTG9hZE1vcmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGlzUGFnaW5hdGluZzogUHJvcFR5cGVzLmJvb2wsXG4gIHBhZ2luYXRpbmdNZXNzYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjYXJkRHJhZnRUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNhcmRXaWR0aDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjYXJkTWFyZ2luOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGxvYWREaXNwbGF5VVJMOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1ByaXZhdGU6IFByb3BUeXBlcy5ib29sLFxuICBkaXNwbGF5VVJMczogUHJvcFR5cGVzLmluc3RhbmNlT2YoTWFwKS5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVkaWFMaWJyYXJ5Q2FyZEdyaWQ7XG4iXX0= */"));

function MediaLibraryCardGrid(props) {
  const {
    canLoadMore,
    isPaginating
  } = props;

  if (canLoadMore || isPaginating) {
    return (0, _core.jsx)(PaginatedGrid, props);
  }

  return (0, _core.jsx)(VirtualizedGrid, props);
}

MediaLibraryCardGrid.propTypes = {
  setScrollContainerRef: _propTypes.default.func.isRequired,
  mediaItems: _propTypes.default.arrayOf(_propTypes.default.shape({
    displayURL: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
    id: _propTypes.default.string.isRequired,
    key: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired,
    type: _propTypes.default.string.isRequired,
    draft: _propTypes.default.bool
  })).isRequired,
  isSelectedFile: _propTypes.default.func.isRequired,
  onAssetClick: _propTypes.default.func.isRequired,
  canLoadMore: _propTypes.default.bool,
  onLoadMore: _propTypes.default.func.isRequired,
  isPaginating: _propTypes.default.bool,
  paginatingMessage: _propTypes.default.string,
  cardDraftText: _propTypes.default.string.isRequired,
  cardWidth: _propTypes.default.string.isRequired,
  cardMargin: _propTypes.default.string.isRequired,
  loadDisplayURL: _propTypes.default.func.isRequired,
  isPrivate: _propTypes.default.bool,
  displayURLs: _propTypes.default.instanceOf(_immutable.Map).isRequired
};
var _default = MediaLibraryCardGrid;
exports.default = _default;