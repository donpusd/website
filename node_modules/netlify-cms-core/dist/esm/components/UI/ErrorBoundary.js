"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ErrorBoundary = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _truncate2 = _interopRequireDefault(require("lodash/truncate"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _reactPolyglot = require("react-polyglot");

var _yaml = _interopRequireDefault(require("yaml"));

var _copyTextToClipboard = _interopRequireDefault(require("copy-text-to-clipboard"));

var _netlifyCmsLibUtil = require("netlify-cms-lib-util");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ISSUE_URL = 'https://github.com/netlify/netlify-cms/issues/new?';

function getIssueTemplate({
  version,
  provider,
  browser,
  config
}) {
  return `
**Describe the bug**

**To Reproduce**

**Expected behavior**

**Screenshots**

**Applicable Versions:**
 - Netlify CMS version: \`${version}\`
 - Git provider: \`${provider}\`
 - Browser version: \`${browser}\`

**CMS configuration**
\`\`\`
${config}
\`\`\`

**Additional context**
`;
}

function buildIssueTemplate({
  config
}) {
  let version = '';

  if (typeof NETLIFY_CMS_VERSION === 'string') {
    version = `netlify-cms@${NETLIFY_CMS_VERSION}`;
  } else if (typeof "2.14.23" === 'string') {
    version = `netlify-cms-app@${"2.14.23"}`;
  }

  const template = getIssueTemplate({
    version,
    provider: config.getIn(['backend', 'name']),
    browser: navigator.userAgent,
    config: _yaml.default.stringify(config.toJS())
  });
  return template;
}

function buildIssueUrl({
  title,
  config
}) {
  try {
    const body = buildIssueTemplate({
      config
    });
    const params = new URLSearchParams();
    params.append('title', (0, _truncate2.default)(title, {
      length: 100
    }));
    params.append('body', (0, _truncate2.default)(body, {
      length: 4000,
      omission: '\n...'
    }));
    params.append('labels', 'type: bug');
    return `${ISSUE_URL}${params.toString()}`;
  } catch (e) {
    console.log(e);
    return `${ISSUE_URL}template=bug_report.md`;
  }
}

const ErrorBoundaryContainer = (0, _styledBase.default)("div", {
  target: "e177kfaq0",
  label: "ErrorBoundaryContainer"
})("padding:40px;h1{font-size:28px;color:", _netlifyCmsUiDefault.colors.text, ";}h2{font-size:20px;}strong{color:", _netlifyCmsUiDefault.colors.textLead, ";font-weight:500;}hr{width:200px;margin:30px 0;border:0;height:1px;background-color:", _netlifyCmsUiDefault.colors.text, ";}a{color:", _netlifyCmsUiDefault.colors.active, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0V5QyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHlhbWwgZnJvbSAneWFtbCc7XG5pbXBvcnQgeyB0cnVuY2F0ZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdGV4dC10by1jbGlwYm9hcmQnO1xuaW1wb3J0IHsgbG9jYWxGb3JhZ2UgfSBmcm9tICduZXRsaWZ5LWNtcy1saWItdXRpbCc7XG5pbXBvcnQgeyBidXR0b25zLCBjb2xvcnMgfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgSVNTVUVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uZXRsaWZ5L25ldGxpZnktY21zL2lzc3Vlcy9uZXc/JztcblxuZnVuY3Rpb24gZ2V0SXNzdWVUZW1wbGF0ZSh7IHZlcnNpb24sIHByb3ZpZGVyLCBicm93c2VyLCBjb25maWcgfSkge1xuICByZXR1cm4gYFxuKipEZXNjcmliZSB0aGUgYnVnKipcblxuKipUbyBSZXByb2R1Y2UqKlxuXG4qKkV4cGVjdGVkIGJlaGF2aW9yKipcblxuKipTY3JlZW5zaG90cyoqXG5cbioqQXBwbGljYWJsZSBWZXJzaW9uczoqKlxuIC0gTmV0bGlmeSBDTVMgdmVyc2lvbjogXFxgJHt2ZXJzaW9ufVxcYFxuIC0gR2l0IHByb3ZpZGVyOiBcXGAke3Byb3ZpZGVyfVxcYFxuIC0gQnJvd3NlciB2ZXJzaW9uOiBcXGAke2Jyb3dzZXJ9XFxgXG5cbioqQ01TIGNvbmZpZ3VyYXRpb24qKlxuXFxgXFxgXFxgXG4ke2NvbmZpZ31cblxcYFxcYFxcYFxuXG4qKkFkZGl0aW9uYWwgY29udGV4dCoqXG5gO1xufVxuXG5mdW5jdGlvbiBidWlsZElzc3VlVGVtcGxhdGUoeyBjb25maWcgfSkge1xuICBsZXQgdmVyc2lvbiA9ICcnO1xuICBpZiAodHlwZW9mIE5FVExJRllfQ01TX1ZFUlNJT04gPT09ICdzdHJpbmcnKSB7XG4gICAgdmVyc2lvbiA9IGBuZXRsaWZ5LWNtc0Ake05FVExJRllfQ01TX1ZFUlNJT059YDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgTkVUTElGWV9DTVNfQVBQX1ZFUlNJT04gPT09ICdzdHJpbmcnKSB7XG4gICAgdmVyc2lvbiA9IGBuZXRsaWZ5LWNtcy1hcHBAJHtORVRMSUZZX0NNU19BUFBfVkVSU0lPTn1gO1xuICB9XG4gIGNvbnN0IHRlbXBsYXRlID0gZ2V0SXNzdWVUZW1wbGF0ZSh7XG4gICAgdmVyc2lvbixcbiAgICBwcm92aWRlcjogY29uZmlnLmdldEluKFsnYmFja2VuZCcsICduYW1lJ10pLFxuICAgIGJyb3dzZXI6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgY29uZmlnOiB5YW1sLnN0cmluZ2lmeShjb25maWcudG9KUygpKSxcbiAgfSk7XG5cbiAgcmV0dXJuIHRlbXBsYXRlO1xufVxuXG5mdW5jdGlvbiBidWlsZElzc3VlVXJsKHsgdGl0bGUsIGNvbmZpZyB9KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGJ1aWxkSXNzdWVUZW1wbGF0ZSh7IGNvbmZpZyB9KTtcblxuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBwYXJhbXMuYXBwZW5kKCd0aXRsZScsIHRydW5jYXRlKHRpdGxlLCB7IGxlbmd0aDogMTAwIH0pKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdib2R5JywgdHJ1bmNhdGUoYm9keSwgeyBsZW5ndGg6IDQwMDAsIG9taXNzaW9uOiAnXFxuLi4uJyB9KSk7XG4gICAgcGFyYW1zLmFwcGVuZCgnbGFiZWxzJywgJ3R5cGU6IGJ1ZycpO1xuXG4gICAgcmV0dXJuIGAke0lTU1VFX1VSTH0ke3BhcmFtcy50b1N0cmluZygpfWA7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgICByZXR1cm4gYCR7SVNTVUVfVVJMfXRlbXBsYXRlPWJ1Z19yZXBvcnQubWRgO1xuICB9XG59XG5cbmNvbnN0IEVycm9yQm91bmRhcnlDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiA0MHB4O1xuXG4gIGgxIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgfVxuXG4gIHN0cm9uZyB7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG5cbiAgaHIge1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBtYXJnaW46IDMwcHggMDtcbiAgICBib3JkZXI6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgfVxuYDtcblxuY29uc3QgUHJpdmFjeVdhcm5pbmcgPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgQ29weUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7YnV0dG9ucy5ncmF5fTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMTJweCAwO1xuYDtcblxuZnVuY3Rpb24gUmVjb3ZlcmVkRW50cnkoeyBlbnRyeSwgdCB9KSB7XG4gIGNvbnNvbGUubG9nKGVudHJ5KTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGhyIC8+XG4gICAgICA8aDI+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkuaGVhZGluZycpfTwvaDI+XG4gICAgICA8c3Ryb25nPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5Lndhcm5pbmcnKX08L3N0cm9uZz5cbiAgICAgIDxDb3B5QnV0dG9uIG9uQ2xpY2s9eygpID0+IGNvcHlUb0NsaXBib2FyZChlbnRyeSl9PlxuICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5jb3B5QnV0dG9uTGFiZWwnKX1cbiAgICAgIDwvQ29weUJ1dHRvbj5cbiAgICAgIDxwcmU+XG4gICAgICAgIDxjb2RlPntlbnRyeX08L2NvZGU+XG4gICAgICA8L3ByZT5cbiAgICA8Lz5cbiAgKTtcbn1cblxuZXhwb3J0IGNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNvbmZpZzogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGhhc0Vycm9yOiBmYWxzZSxcbiAgICBlcnJvck1lc3NhZ2U6ICcnLFxuICAgIGJhY2t1cDogJycsXG4gIH07XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiB7IGhhc0Vycm9yOiB0cnVlLCBlcnJvck1lc3NhZ2U6IGVycm9yLnRvU3RyaW5nKCkgfTtcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dCYWNrdXApIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMuc3RhdGUuZXJyb3JNZXNzYWdlICE9PSBuZXh0U3RhdGUuZXJyb3JNZXNzYWdlIHx8IHRoaXMuc3RhdGUuYmFja3VwICE9PSBuZXh0U3RhdGUuYmFja3VwXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93QmFja3VwKSB7XG4gICAgICBjb25zdCBiYWNrdXAgPSBhd2FpdCBsb2NhbEZvcmFnZS5nZXRJdGVtKCdiYWNrdXAnKTtcbiAgICAgIGJhY2t1cCAmJiBjb25zb2xlLmxvZyhiYWNrdXApO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGJhY2t1cCB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBoYXNFcnJvciwgZXJyb3JNZXNzYWdlLCBiYWNrdXAgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBzaG93QmFja3VwLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghaGFzRXJyb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPEVycm9yQm91bmRhcnlDb250YWluZXI+XG4gICAgICAgIDxoMT57dCgndWkuZXJyb3JCb3VuZGFyeS50aXRsZScpfTwvaDE+XG4gICAgICAgIDxwPlxuICAgICAgICAgIDxzcGFuPnt0KCd1aS5lcnJvckJvdW5kYXJ5LmRldGFpbHMnKX08L3NwYW4+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIGhyZWY9e2J1aWxkSXNzdWVVcmwoeyB0aXRsZTogZXJyb3JNZXNzYWdlLCBjb25maWc6IHRoaXMucHJvcHMuY29uZmlnIH0pfVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJpc3N1ZS11cmxcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlcG9ydEl0Jyl9XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnByaXZhY3lXYXJuaW5nJylcbiAgICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPFByaXZhY3lXYXJuaW5nIGtleT17aW5kZXh9PntpdGVtfTwvUHJpdmFjeVdhcm5pbmc+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvcD5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5kZXRhaWxzSGVhZGluZycpfTwvaDI+XG4gICAgICAgIDxwPntlcnJvck1lc3NhZ2V9PC9wPlxuICAgICAgICB7YmFja3VwICYmIHNob3dCYWNrdXAgJiYgPFJlY292ZXJlZEVudHJ5IGVudHJ5PXtiYWNrdXB9IHQ9e3R9IC8+fVxuICAgICAgPC9FcnJvckJvdW5kYXJ5Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRXJyb3JCb3VuZGFyeSk7XG4iXX0= */"));
const PrivacyWarning = (0, _styledBase.default)("span", {
  target: "e177kfaq1",
  label: "PrivacyWarning"
})("color:", _netlifyCmsUiDefault.colors.text, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0drQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHlhbWwgZnJvbSAneWFtbCc7XG5pbXBvcnQgeyB0cnVuY2F0ZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdGV4dC10by1jbGlwYm9hcmQnO1xuaW1wb3J0IHsgbG9jYWxGb3JhZ2UgfSBmcm9tICduZXRsaWZ5LWNtcy1saWItdXRpbCc7XG5pbXBvcnQgeyBidXR0b25zLCBjb2xvcnMgfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgSVNTVUVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uZXRsaWZ5L25ldGxpZnktY21zL2lzc3Vlcy9uZXc/JztcblxuZnVuY3Rpb24gZ2V0SXNzdWVUZW1wbGF0ZSh7IHZlcnNpb24sIHByb3ZpZGVyLCBicm93c2VyLCBjb25maWcgfSkge1xuICByZXR1cm4gYFxuKipEZXNjcmliZSB0aGUgYnVnKipcblxuKipUbyBSZXByb2R1Y2UqKlxuXG4qKkV4cGVjdGVkIGJlaGF2aW9yKipcblxuKipTY3JlZW5zaG90cyoqXG5cbioqQXBwbGljYWJsZSBWZXJzaW9uczoqKlxuIC0gTmV0bGlmeSBDTVMgdmVyc2lvbjogXFxgJHt2ZXJzaW9ufVxcYFxuIC0gR2l0IHByb3ZpZGVyOiBcXGAke3Byb3ZpZGVyfVxcYFxuIC0gQnJvd3NlciB2ZXJzaW9uOiBcXGAke2Jyb3dzZXJ9XFxgXG5cbioqQ01TIGNvbmZpZ3VyYXRpb24qKlxuXFxgXFxgXFxgXG4ke2NvbmZpZ31cblxcYFxcYFxcYFxuXG4qKkFkZGl0aW9uYWwgY29udGV4dCoqXG5gO1xufVxuXG5mdW5jdGlvbiBidWlsZElzc3VlVGVtcGxhdGUoeyBjb25maWcgfSkge1xuICBsZXQgdmVyc2lvbiA9ICcnO1xuICBpZiAodHlwZW9mIE5FVExJRllfQ01TX1ZFUlNJT04gPT09ICdzdHJpbmcnKSB7XG4gICAgdmVyc2lvbiA9IGBuZXRsaWZ5LWNtc0Ake05FVExJRllfQ01TX1ZFUlNJT059YDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgTkVUTElGWV9DTVNfQVBQX1ZFUlNJT04gPT09ICdzdHJpbmcnKSB7XG4gICAgdmVyc2lvbiA9IGBuZXRsaWZ5LWNtcy1hcHBAJHtORVRMSUZZX0NNU19BUFBfVkVSU0lPTn1gO1xuICB9XG4gIGNvbnN0IHRlbXBsYXRlID0gZ2V0SXNzdWVUZW1wbGF0ZSh7XG4gICAgdmVyc2lvbixcbiAgICBwcm92aWRlcjogY29uZmlnLmdldEluKFsnYmFja2VuZCcsICduYW1lJ10pLFxuICAgIGJyb3dzZXI6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgY29uZmlnOiB5YW1sLnN0cmluZ2lmeShjb25maWcudG9KUygpKSxcbiAgfSk7XG5cbiAgcmV0dXJuIHRlbXBsYXRlO1xufVxuXG5mdW5jdGlvbiBidWlsZElzc3VlVXJsKHsgdGl0bGUsIGNvbmZpZyB9KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGJ1aWxkSXNzdWVUZW1wbGF0ZSh7IGNvbmZpZyB9KTtcblxuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBwYXJhbXMuYXBwZW5kKCd0aXRsZScsIHRydW5jYXRlKHRpdGxlLCB7IGxlbmd0aDogMTAwIH0pKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdib2R5JywgdHJ1bmNhdGUoYm9keSwgeyBsZW5ndGg6IDQwMDAsIG9taXNzaW9uOiAnXFxuLi4uJyB9KSk7XG4gICAgcGFyYW1zLmFwcGVuZCgnbGFiZWxzJywgJ3R5cGU6IGJ1ZycpO1xuXG4gICAgcmV0dXJuIGAke0lTU1VFX1VSTH0ke3BhcmFtcy50b1N0cmluZygpfWA7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgICByZXR1cm4gYCR7SVNTVUVfVVJMfXRlbXBsYXRlPWJ1Z19yZXBvcnQubWRgO1xuICB9XG59XG5cbmNvbnN0IEVycm9yQm91bmRhcnlDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiA0MHB4O1xuXG4gIGgxIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgfVxuXG4gIHN0cm9uZyB7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG5cbiAgaHIge1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBtYXJnaW46IDMwcHggMDtcbiAgICBib3JkZXI6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgfVxuYDtcblxuY29uc3QgUHJpdmFjeVdhcm5pbmcgPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgQ29weUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7YnV0dG9ucy5ncmF5fTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMTJweCAwO1xuYDtcblxuZnVuY3Rpb24gUmVjb3ZlcmVkRW50cnkoeyBlbnRyeSwgdCB9KSB7XG4gIGNvbnNvbGUubG9nKGVudHJ5KTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGhyIC8+XG4gICAgICA8aDI+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkuaGVhZGluZycpfTwvaDI+XG4gICAgICA8c3Ryb25nPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5Lndhcm5pbmcnKX08L3N0cm9uZz5cbiAgICAgIDxDb3B5QnV0dG9uIG9uQ2xpY2s9eygpID0+IGNvcHlUb0NsaXBib2FyZChlbnRyeSl9PlxuICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5jb3B5QnV0dG9uTGFiZWwnKX1cbiAgICAgIDwvQ29weUJ1dHRvbj5cbiAgICAgIDxwcmU+XG4gICAgICAgIDxjb2RlPntlbnRyeX08L2NvZGU+XG4gICAgICA8L3ByZT5cbiAgICA8Lz5cbiAgKTtcbn1cblxuZXhwb3J0IGNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNvbmZpZzogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGhhc0Vycm9yOiBmYWxzZSxcbiAgICBlcnJvck1lc3NhZ2U6ICcnLFxuICAgIGJhY2t1cDogJycsXG4gIH07XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiB7IGhhc0Vycm9yOiB0cnVlLCBlcnJvck1lc3NhZ2U6IGVycm9yLnRvU3RyaW5nKCkgfTtcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dCYWNrdXApIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMuc3RhdGUuZXJyb3JNZXNzYWdlICE9PSBuZXh0U3RhdGUuZXJyb3JNZXNzYWdlIHx8IHRoaXMuc3RhdGUuYmFja3VwICE9PSBuZXh0U3RhdGUuYmFja3VwXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93QmFja3VwKSB7XG4gICAgICBjb25zdCBiYWNrdXAgPSBhd2FpdCBsb2NhbEZvcmFnZS5nZXRJdGVtKCdiYWNrdXAnKTtcbiAgICAgIGJhY2t1cCAmJiBjb25zb2xlLmxvZyhiYWNrdXApO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGJhY2t1cCB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBoYXNFcnJvciwgZXJyb3JNZXNzYWdlLCBiYWNrdXAgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBzaG93QmFja3VwLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghaGFzRXJyb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPEVycm9yQm91bmRhcnlDb250YWluZXI+XG4gICAgICAgIDxoMT57dCgndWkuZXJyb3JCb3VuZGFyeS50aXRsZScpfTwvaDE+XG4gICAgICAgIDxwPlxuICAgICAgICAgIDxzcGFuPnt0KCd1aS5lcnJvckJvdW5kYXJ5LmRldGFpbHMnKX08L3NwYW4+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIGhyZWY9e2J1aWxkSXNzdWVVcmwoeyB0aXRsZTogZXJyb3JNZXNzYWdlLCBjb25maWc6IHRoaXMucHJvcHMuY29uZmlnIH0pfVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJpc3N1ZS11cmxcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlcG9ydEl0Jyl9XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnByaXZhY3lXYXJuaW5nJylcbiAgICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPFByaXZhY3lXYXJuaW5nIGtleT17aW5kZXh9PntpdGVtfTwvUHJpdmFjeVdhcm5pbmc+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvcD5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5kZXRhaWxzSGVhZGluZycpfTwvaDI+XG4gICAgICAgIDxwPntlcnJvck1lc3NhZ2V9PC9wPlxuICAgICAgICB7YmFja3VwICYmIHNob3dCYWNrdXAgJiYgPFJlY292ZXJlZEVudHJ5IGVudHJ5PXtiYWNrdXB9IHQ9e3R9IC8+fVxuICAgICAgPC9FcnJvckJvdW5kYXJ5Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRXJyb3JCb3VuZGFyeSk7XG4iXX0= */"));
const CopyButton = (0, _styledBase.default)("button", {
  target: "e177kfaq2",
  label: "CopyButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.buttons.default, ";", _netlifyCmsUiDefault.buttons.gray, ";display:block;margin:12px 0;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0dnQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHlhbWwgZnJvbSAneWFtbCc7XG5pbXBvcnQgeyB0cnVuY2F0ZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdGV4dC10by1jbGlwYm9hcmQnO1xuaW1wb3J0IHsgbG9jYWxGb3JhZ2UgfSBmcm9tICduZXRsaWZ5LWNtcy1saWItdXRpbCc7XG5pbXBvcnQgeyBidXR0b25zLCBjb2xvcnMgfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgSVNTVUVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uZXRsaWZ5L25ldGxpZnktY21zL2lzc3Vlcy9uZXc/JztcblxuZnVuY3Rpb24gZ2V0SXNzdWVUZW1wbGF0ZSh7IHZlcnNpb24sIHByb3ZpZGVyLCBicm93c2VyLCBjb25maWcgfSkge1xuICByZXR1cm4gYFxuKipEZXNjcmliZSB0aGUgYnVnKipcblxuKipUbyBSZXByb2R1Y2UqKlxuXG4qKkV4cGVjdGVkIGJlaGF2aW9yKipcblxuKipTY3JlZW5zaG90cyoqXG5cbioqQXBwbGljYWJsZSBWZXJzaW9uczoqKlxuIC0gTmV0bGlmeSBDTVMgdmVyc2lvbjogXFxgJHt2ZXJzaW9ufVxcYFxuIC0gR2l0IHByb3ZpZGVyOiBcXGAke3Byb3ZpZGVyfVxcYFxuIC0gQnJvd3NlciB2ZXJzaW9uOiBcXGAke2Jyb3dzZXJ9XFxgXG5cbioqQ01TIGNvbmZpZ3VyYXRpb24qKlxuXFxgXFxgXFxgXG4ke2NvbmZpZ31cblxcYFxcYFxcYFxuXG4qKkFkZGl0aW9uYWwgY29udGV4dCoqXG5gO1xufVxuXG5mdW5jdGlvbiBidWlsZElzc3VlVGVtcGxhdGUoeyBjb25maWcgfSkge1xuICBsZXQgdmVyc2lvbiA9ICcnO1xuICBpZiAodHlwZW9mIE5FVExJRllfQ01TX1ZFUlNJT04gPT09ICdzdHJpbmcnKSB7XG4gICAgdmVyc2lvbiA9IGBuZXRsaWZ5LWNtc0Ake05FVExJRllfQ01TX1ZFUlNJT059YDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgTkVUTElGWV9DTVNfQVBQX1ZFUlNJT04gPT09ICdzdHJpbmcnKSB7XG4gICAgdmVyc2lvbiA9IGBuZXRsaWZ5LWNtcy1hcHBAJHtORVRMSUZZX0NNU19BUFBfVkVSU0lPTn1gO1xuICB9XG4gIGNvbnN0IHRlbXBsYXRlID0gZ2V0SXNzdWVUZW1wbGF0ZSh7XG4gICAgdmVyc2lvbixcbiAgICBwcm92aWRlcjogY29uZmlnLmdldEluKFsnYmFja2VuZCcsICduYW1lJ10pLFxuICAgIGJyb3dzZXI6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgY29uZmlnOiB5YW1sLnN0cmluZ2lmeShjb25maWcudG9KUygpKSxcbiAgfSk7XG5cbiAgcmV0dXJuIHRlbXBsYXRlO1xufVxuXG5mdW5jdGlvbiBidWlsZElzc3VlVXJsKHsgdGl0bGUsIGNvbmZpZyB9KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGJ1aWxkSXNzdWVUZW1wbGF0ZSh7IGNvbmZpZyB9KTtcblxuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBwYXJhbXMuYXBwZW5kKCd0aXRsZScsIHRydW5jYXRlKHRpdGxlLCB7IGxlbmd0aDogMTAwIH0pKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdib2R5JywgdHJ1bmNhdGUoYm9keSwgeyBsZW5ndGg6IDQwMDAsIG9taXNzaW9uOiAnXFxuLi4uJyB9KSk7XG4gICAgcGFyYW1zLmFwcGVuZCgnbGFiZWxzJywgJ3R5cGU6IGJ1ZycpO1xuXG4gICAgcmV0dXJuIGAke0lTU1VFX1VSTH0ke3BhcmFtcy50b1N0cmluZygpfWA7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgICByZXR1cm4gYCR7SVNTVUVfVVJMfXRlbXBsYXRlPWJ1Z19yZXBvcnQubWRgO1xuICB9XG59XG5cbmNvbnN0IEVycm9yQm91bmRhcnlDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiA0MHB4O1xuXG4gIGgxIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgfVxuXG4gIHN0cm9uZyB7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG5cbiAgaHIge1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBtYXJnaW46IDMwcHggMDtcbiAgICBib3JkZXI6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgfVxuYDtcblxuY29uc3QgUHJpdmFjeVdhcm5pbmcgPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgQ29weUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7YnV0dG9ucy5ncmF5fTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMTJweCAwO1xuYDtcblxuZnVuY3Rpb24gUmVjb3ZlcmVkRW50cnkoeyBlbnRyeSwgdCB9KSB7XG4gIGNvbnNvbGUubG9nKGVudHJ5KTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGhyIC8+XG4gICAgICA8aDI+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkuaGVhZGluZycpfTwvaDI+XG4gICAgICA8c3Ryb25nPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5Lndhcm5pbmcnKX08L3N0cm9uZz5cbiAgICAgIDxDb3B5QnV0dG9uIG9uQ2xpY2s9eygpID0+IGNvcHlUb0NsaXBib2FyZChlbnRyeSl9PlxuICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5jb3B5QnV0dG9uTGFiZWwnKX1cbiAgICAgIDwvQ29weUJ1dHRvbj5cbiAgICAgIDxwcmU+XG4gICAgICAgIDxjb2RlPntlbnRyeX08L2NvZGU+XG4gICAgICA8L3ByZT5cbiAgICA8Lz5cbiAgKTtcbn1cblxuZXhwb3J0IGNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNvbmZpZzogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGhhc0Vycm9yOiBmYWxzZSxcbiAgICBlcnJvck1lc3NhZ2U6ICcnLFxuICAgIGJhY2t1cDogJycsXG4gIH07XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiB7IGhhc0Vycm9yOiB0cnVlLCBlcnJvck1lc3NhZ2U6IGVycm9yLnRvU3RyaW5nKCkgfTtcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dCYWNrdXApIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMuc3RhdGUuZXJyb3JNZXNzYWdlICE9PSBuZXh0U3RhdGUuZXJyb3JNZXNzYWdlIHx8IHRoaXMuc3RhdGUuYmFja3VwICE9PSBuZXh0U3RhdGUuYmFja3VwXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93QmFja3VwKSB7XG4gICAgICBjb25zdCBiYWNrdXAgPSBhd2FpdCBsb2NhbEZvcmFnZS5nZXRJdGVtKCdiYWNrdXAnKTtcbiAgICAgIGJhY2t1cCAmJiBjb25zb2xlLmxvZyhiYWNrdXApO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGJhY2t1cCB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBoYXNFcnJvciwgZXJyb3JNZXNzYWdlLCBiYWNrdXAgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBzaG93QmFja3VwLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghaGFzRXJyb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPEVycm9yQm91bmRhcnlDb250YWluZXI+XG4gICAgICAgIDxoMT57dCgndWkuZXJyb3JCb3VuZGFyeS50aXRsZScpfTwvaDE+XG4gICAgICAgIDxwPlxuICAgICAgICAgIDxzcGFuPnt0KCd1aS5lcnJvckJvdW5kYXJ5LmRldGFpbHMnKX08L3NwYW4+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIGhyZWY9e2J1aWxkSXNzdWVVcmwoeyB0aXRsZTogZXJyb3JNZXNzYWdlLCBjb25maWc6IHRoaXMucHJvcHMuY29uZmlnIH0pfVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJpc3N1ZS11cmxcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlcG9ydEl0Jyl9XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnByaXZhY3lXYXJuaW5nJylcbiAgICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPFByaXZhY3lXYXJuaW5nIGtleT17aW5kZXh9PntpdGVtfTwvUHJpdmFjeVdhcm5pbmc+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvcD5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5kZXRhaWxzSGVhZGluZycpfTwvaDI+XG4gICAgICAgIDxwPntlcnJvck1lc3NhZ2V9PC9wPlxuICAgICAgICB7YmFja3VwICYmIHNob3dCYWNrdXAgJiYgPFJlY292ZXJlZEVudHJ5IGVudHJ5PXtiYWNrdXB9IHQ9e3R9IC8+fVxuICAgICAgPC9FcnJvckJvdW5kYXJ5Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRXJyb3JCb3VuZGFyeSk7XG4iXX0= */"));

function RecoveredEntry({
  entry,
  t
}) {
  console.log(entry);
  return (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)("hr", null), (0, _core.jsx)("h2", null, t('ui.errorBoundary.recoveredEntry.heading')), (0, _core.jsx)("strong", null, t('ui.errorBoundary.recoveredEntry.warning')), (0, _core.jsx)(CopyButton, {
    onClick: () => (0, _copyTextToClipboard.default)(entry)
  }, t('ui.errorBoundary.recoveredEntry.copyButtonLabel')), (0, _core.jsx)("pre", null, (0, _core.jsx)("code", null, entry)));
}

class ErrorBoundary extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      hasError: false,
      errorMessage: '',
      backup: ''
    });
  }

  static getDerivedStateFromError(error) {
    console.error(error);
    return {
      hasError: true,
      errorMessage: error.toString()
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    if (this.props.showBackup) {
      return this.state.errorMessage !== nextState.errorMessage || this.state.backup !== nextState.backup;
    }

    return true;
  }

  async componentDidUpdate() {
    if (this.props.showBackup) {
      const backup = await _netlifyCmsLibUtil.localForage.getItem('backup');
      backup && console.log(backup);
      this.setState({
        backup
      });
    }
  }

  render() {
    const {
      hasError,
      errorMessage,
      backup
    } = this.state;
    const {
      showBackup,
      t
    } = this.props;

    if (!hasError) {
      return this.props.children;
    }

    return (0, _core.jsx)(ErrorBoundaryContainer, null, (0, _core.jsx)("h1", null, t('ui.errorBoundary.title')), (0, _core.jsx)("p", null, (0, _core.jsx)("span", null, t('ui.errorBoundary.details')), (0, _core.jsx)("a", {
      href: buildIssueUrl({
        title: errorMessage,
        config: this.props.config
      }),
      target: "_blank",
      rel: "noopener noreferrer",
      "data-testid": "issue-url"
    }, t('ui.errorBoundary.reportIt'))), (0, _core.jsx)("p", null, t('ui.errorBoundary.privacyWarning').split('\n').map((item, index) => (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(PrivacyWarning, {
      key: index
    }, item), (0, _core.jsx)("br", null)))), (0, _core.jsx)("hr", null), (0, _core.jsx)("h2", null, t('ui.errorBoundary.detailsHeading')), (0, _core.jsx)("p", null, errorMessage), backup && showBackup && (0, _core.jsx)(RecoveredEntry, {
      entry: backup,
      t: t
    }));
  }

}

exports.ErrorBoundary = ErrorBoundary;

_defineProperty(ErrorBoundary, "propTypes", {
  children: _propTypes.default.node,
  t: _propTypes.default.func.isRequired,
  config: _reactImmutableProptypes.default.map.isRequired
});

var _default = (0, _reactPolyglot.translate)()(ErrorBoundary);

exports.default = _default;