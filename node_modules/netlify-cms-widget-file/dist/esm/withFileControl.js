"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = withFileControl;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _once2 = _interopRequireDefault(require("lodash/once"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _immutable = require("immutable");

var _v = _interopRequireDefault(require("uuid/v4"));

var _commonTags = require("common-tags");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _netlifyCmsLibUtil = require("netlify-cms-lib-util");

var _reactSortableHoc = require("react-sortable-hoc");

var _arrayMove = _interopRequireDefault(require("array-move"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const MAX_DISPLAY_LENGTH = 50;
const ImageWrapper = (0, _styledBase.default)("div", {
  target: "e1awjdnj0",
  label: "ImageWrapper"
})("flex-basis:155px;width:155px;height:100px;margin-right:20px;margin-bottom:20px;border:", _netlifyCmsUiDefault.borders.textField, ";border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";overflow:hidden;", _netlifyCmsUiDefault.effects.checkerboard, ";", _netlifyCmsUiDefault.shadows.inset, ";cursor:", props => props.sortable ? 'pointer' : 'auto', ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledImage = (0, _styledBase.default)("img", {
  target: "e1awjdnj1",
  label: "StyledImage"
})(process.env.NODE_ENV === "production" ? {
  name: "r91awh",
  styles: "width:100%;height:100%;object-fit:contain;"
} : {
  name: "r91awh",
  styles: "width:100%;height:100%;object-fit:contain;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

function Image(props) {
  return (0, _core.jsx)(StyledImage, _extends({
    role: "presentation"
  }, props));
}

const SortableImage = (0, _reactSortableHoc.SortableElement)(({
  itemValue,
  getAsset,
  field
}) => {
  return (0, _core.jsx)(ImageWrapper, {
    sortable: true
  }, (0, _core.jsx)(Image, {
    src: getAsset(itemValue, field) || ''
  }));
});

var _ref = process.env.NODE_ENV === "production" ? {
  name: "e1mylu-SortableMultiImageWrapper",
  styles: "display:flex;flex-wrap:wrap;;label:SortableMultiImageWrapper;"
} : {
  name: "e1mylu-SortableMultiImageWrapper",
  styles: "display:flex;flex-wrap:wrap;;label:SortableMultiImageWrapper;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

const SortableMultiImageWrapper = (0, _reactSortableHoc.SortableContainer)(({
  items,
  getAsset,
  field
}) => {
  return (0, _core.jsx)("div", {
    css: _ref
  }, items.map((itemValue, index) => (0, _core.jsx)(SortableImage, {
    key: `item-${itemValue}`,
    index: index,
    itemValue: itemValue,
    getAsset: getAsset,
    field: field
  })));
});
const FileLink = (0, _styledBase.default)("a", {
  target: "e1awjdnj2",
  label: "FileLink"
})(process.env.NODE_ENV === "production" ? {
  name: "7mbjrw",
  styles: "margin-bottom:20px;font-weight:normal;color:inherit;&:hover,&:active,&:focus{text-decoration:underline;}"
} : {
  name: "7mbjrw",
  styles: "margin-bottom:20px;font-weight:normal;color:inherit;&:hover,&:active,&:focus{text-decoration:underline;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93aXRoRmlsZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUV5QiIsImZpbGUiOiIuLi8uLi9zcmMvd2l0aEZpbGVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBNYXAsIExpc3QgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgb25jZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgdXVpZCBmcm9tICd1dWlkL3Y0JztcbmltcG9ydCB7IG9uZUxpbmUgfSBmcm9tICdjb21tb24tdGFncyc7XG5pbXBvcnQgeyBsZW5ndGhzLCBjb21wb25lbnRzLCBidXR0b25zLCBib3JkZXJzLCBlZmZlY3RzLCBzaGFkb3dzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBiYXNlbmFtZSB9IGZyb20gJ25ldGxpZnktY21zLWxpYi11dGlsJztcbmltcG9ydCB7IFNvcnRhYmxlQ29udGFpbmVyLCBTb3J0YWJsZUVsZW1lbnQgfSBmcm9tICdyZWFjdC1zb3J0YWJsZS1ob2MnO1xuaW1wb3J0IGFycmF5TW92ZSBmcm9tICdhcnJheS1tb3ZlJztcblxuY29uc3QgTUFYX0RJU1BMQVlfTEVOR1RIID0gNTA7XG5cbmNvbnN0IEltYWdlV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGZsZXgtYmFzaXM6IDE1NXB4O1xuICB3aWR0aDogMTU1cHg7XG4gIGhlaWdodDogMTAwcHg7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgYm9yZGVyOiAke2JvcmRlcnMudGV4dEZpZWxkfTtcbiAgYm9yZGVyLXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gICR7ZWZmZWN0cy5jaGVja2VyYm9hcmR9O1xuICAke3NoYWRvd3MuaW5zZXR9O1xuICBjdXJzb3I6ICR7cHJvcHMgPT4gKHByb3BzLnNvcnRhYmxlID8gJ3BvaW50ZXInIDogJ2F1dG8nKX07XG5gO1xuXG5jb25zdCBTdHlsZWRJbWFnZSA9IHN0eWxlZC5pbWdgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XG5gO1xuXG5mdW5jdGlvbiBJbWFnZShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEltYWdlIHJvbGU9XCJwcmVzZW50YXRpb25cIiB7Li4ucHJvcHN9IC8+O1xufVxuXG5jb25zdCBTb3J0YWJsZUltYWdlID0gU29ydGFibGVFbGVtZW50KCh7IGl0ZW1WYWx1ZSwgZ2V0QXNzZXQsIGZpZWxkIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8SW1hZ2VXcmFwcGVyIHNvcnRhYmxlPlxuICAgICAgPEltYWdlIHNyYz17Z2V0QXNzZXQoaXRlbVZhbHVlLCBmaWVsZCkgfHwgJyd9IC8+XG4gICAgPC9JbWFnZVdyYXBwZXI+XG4gICk7XG59KTtcblxuY29uc3QgU29ydGFibGVNdWx0aUltYWdlV3JhcHBlciA9IFNvcnRhYmxlQ29udGFpbmVyKCh7IGl0ZW1zLCBnZXRBc3NldCwgZmllbGQgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17Y3NzYFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICBgfVxuICAgID5cbiAgICAgIHtpdGVtcy5tYXAoKGl0ZW1WYWx1ZSwgaW5kZXgpID0+IChcbiAgICAgICAgPFNvcnRhYmxlSW1hZ2VcbiAgICAgICAgICBrZXk9e2BpdGVtLSR7aXRlbVZhbHVlfWB9XG4gICAgICAgICAgaW5kZXg9e2luZGV4fVxuICAgICAgICAgIGl0ZW1WYWx1ZT17aXRlbVZhbHVlfVxuICAgICAgICAgIGdldEFzc2V0PXtnZXRBc3NldH1cbiAgICAgICAgICBmaWVsZD17ZmllbGR9XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn0pO1xuXG5jb25zdCBGaWxlTGluayA9IHN0eWxlZC5hYFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBjb2xvcjogaW5oZXJpdDtcblxuICAmOmhvdmVyLFxuICAmOmFjdGl2ZSxcbiAgJjpmb2N1cyB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIH1cbmA7XG5cbmNvbnN0IEZpbGVMaW5rcyA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi1ib3R0b206IDEycHg7XG5gO1xuXG5jb25zdCBGaWxlTGlua0xpc3QgPSBzdHlsZWQudWxgXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbmA7XG5cbmNvbnN0IEZpbGVXaWRnZXRCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtjb21wb25lbnRzLmJhZGdlfTtcbiAgbWFyZ2luLWJvdHRvbTogMTJweDtcbmA7XG5cbmNvbnN0IEZpbGVXaWRnZXRCdXR0b25SZW1vdmUgPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtjb21wb25lbnRzLmJhZGdlRGFuZ2VyfTtcbmA7XG5cbmZ1bmN0aW9uIGlzTXVsdGlwbGUodmFsdWUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IExpc3QuaXNMaXN0KHZhbHVlKTtcbn1cblxuY29uc3Qgd2FybkRlcHJlY2F0ZWRPcHRpb25zID0gb25jZShmaWVsZCA9PlxuICBjb25zb2xlLndhcm4ob25lTGluZWBcbiAgTmV0bGlmeSBDTVMgY29uZmlnOiAke2ZpZWxkLmdldCgnbmFtZScpfSBmaWVsZDogcHJvcGVydHkgXCJvcHRpb25zXCIgaGFzIGJlZW4gZGVwcmVjYXRlZCBmb3IgdGhlXG4gICR7ZmllbGQuZ2V0KCd3aWRnZXQnKX0gd2lkZ2V0IGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS4gUmF0aGVyIHRoYW5cbiAgXFxgZmllbGQub3B0aW9ucy5tZWRpYV9saWJyYXJ5XFxgLCBhcHBseSBtZWRpYSBsaWJyYXJ5IG9wdGlvbnMgZm9yIHRoaXMgd2lkZ2V0IHVuZGVyXG4gIFxcYGZpZWxkLm1lZGlhX2xpYnJhcnlcXGAuXG5gKSxcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdpdGhGaWxlQ29udHJvbCh7IGZvckltYWdlIH0gPSB7fSkge1xuICByZXR1cm4gY2xhc3MgRmlsZUNvbnRyb2wgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICBmaWVsZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgICAgZ2V0QXNzZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBtZWRpYVBhdGhzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgICBvbkFkZEFzc2V0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBvblJlbW92ZUluc2VydGVkTWVkaWE6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBvbk9wZW5NZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBvbkNsZWFyTWVkaWFDb250cm9sOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgb25SZW1vdmVNZWRpYUNvbnRyb2w6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBjbGFzc05hbWVXcmFwcGVyOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICAgICAgICBJbW11dGFibGVQcm9wVHlwZXMubGlzdE9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICAgICAgXSksXG4gICAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIH07XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgdmFsdWU6ICcnLFxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgdGhpcy5jb250cm9sSUQgPSB1dWlkKCk7XG4gICAgfVxuXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgLyoqXG4gICAgICAgKiBBbHdheXMgdXBkYXRlIGlmIHRoZSB2YWx1ZSBvciBnZXRBc3NldCBjaGFuZ2VzLlxuICAgICAgICovXG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlIHx8IHRoaXMucHJvcHMuZ2V0QXNzZXQgIT09IG5leHRQcm9wcy5nZXRBc3NldCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBJZiB0aGVyZSBpcyBhIG1lZGlhIHBhdGggZm9yIHRoaXMgY29udHJvbCBpbiB0aGUgc3RhdGUgb2JqZWN0LCBhbmQgdGhhdFxuICAgICAgICogcGF0aCBpcyBkaWZmZXJlbnQgdGhhbiB0aGUgdmFsdWUgaW4gYG5leHRQcm9wc2AsIHVwZGF0ZS5cbiAgICAgICAqL1xuICAgICAgY29uc3QgbWVkaWFQYXRoID0gbmV4dFByb3BzLm1lZGlhUGF0aHMuZ2V0KHRoaXMuY29udHJvbElEKTtcbiAgICAgIGlmIChtZWRpYVBhdGggJiYgbmV4dFByb3BzLnZhbHVlICE9PSBtZWRpYVBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICBjb25zdCB7IG1lZGlhUGF0aHMsIHZhbHVlLCBvblJlbW92ZUluc2VydGVkTWVkaWEsIG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgbWVkaWFQYXRoID0gbWVkaWFQYXRocy5nZXQodGhpcy5jb250cm9sSUQpO1xuICAgICAgaWYgKG1lZGlhUGF0aCAmJiBtZWRpYVBhdGggIT09IHZhbHVlKSB7XG4gICAgICAgIG9uQ2hhbmdlKG1lZGlhUGF0aCk7XG4gICAgICB9IGVsc2UgaWYgKG1lZGlhUGF0aCAmJiBtZWRpYVBhdGggPT09IHZhbHVlKSB7XG4gICAgICAgIG9uUmVtb3ZlSW5zZXJ0ZWRNZWRpYSh0aGlzLmNvbnRyb2xJRCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnByb3BzLm9uUmVtb3ZlTWVkaWFDb250cm9sKHRoaXMuY29udHJvbElEKTtcbiAgICB9XG5cbiAgICBoYW5kbGVDaGFuZ2UgPSBlID0+IHtcbiAgICAgIGNvbnN0IHsgZmllbGQsIG9uT3Blbk1lZGlhTGlicmFyeSwgdmFsdWUgfSA9IHRoaXMucHJvcHM7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBsZXQgbWVkaWFMaWJyYXJ5RmllbGRPcHRpb25zO1xuXG4gICAgICAvKipcbiAgICAgICAqIGBvcHRpb25zYCBoYXNoIGFzIGEgZ2VuZXJhbCBmaWVsZCBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkLCBvbmx5IHVzZWRcbiAgICAgICAqIHdoZW4gZXh0ZXJuYWwgbWVkaWEgbGlicmFyaWVzIHdlcmUgZmlyc3QgaW50cm9kdWNlZC4gTm90IHRvIGJlXG4gICAgICAgKiBjb25mdXNlZCB3aXRoIGBvcHRpb25zYCBmb3IgdGhlIHNlbGVjdCB3aWRnZXQsIHdoaWNoIHNlcnZlcyBhIGRpZmZlcmVudFxuICAgICAgICogcHVycG9zZS5cbiAgICAgICAqL1xuICAgICAgaWYgKGZpZWxkLmhhc0luKFsnb3B0aW9ucycsICdtZWRpYV9saWJyYXJ5J10pKSB7XG4gICAgICAgIHdhcm5EZXByZWNhdGVkT3B0aW9ucyhmaWVsZCk7XG4gICAgICAgIG1lZGlhTGlicmFyeUZpZWxkT3B0aW9ucyA9IGZpZWxkLmdldEluKFsnb3B0aW9ucycsICdtZWRpYV9saWJyYXJ5J10sIE1hcCgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lZGlhTGlicmFyeUZpZWxkT3B0aW9ucyA9IGZpZWxkLmdldCgnbWVkaWFfbGlicmFyeScsIE1hcCgpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uT3Blbk1lZGlhTGlicmFyeSh7XG4gICAgICAgIGNvbnRyb2xJRDogdGhpcy5jb250cm9sSUQsXG4gICAgICAgIGZvckltYWdlLFxuICAgICAgICBwcml2YXRlVXBsb2FkOiBmaWVsZC5nZXQoJ3ByaXZhdGUnKSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGFsbG93TXVsdGlwbGU6ICEhbWVkaWFMaWJyYXJ5RmllbGRPcHRpb25zLmdldCgnYWxsb3dfbXVsdGlwbGUnLCB0cnVlKSxcbiAgICAgICAgY29uZmlnOiBtZWRpYUxpYnJhcnlGaWVsZE9wdGlvbnMuZ2V0KCdjb25maWcnKSxcbiAgICAgICAgZmllbGQsXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaGFuZGxlVXJsID0gc3ViamVjdCA9PiBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgY29uc3QgdXJsID0gd2luZG93LnByb21wdCh0aGlzLnByb3BzLnQoYGVkaXRvci5lZGl0b3JXaWRnZXRzLiR7c3ViamVjdH0ucHJvbXB0VXJsYCkpO1xuXG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNoYW5nZSh1cmwpO1xuICAgIH07XG5cbiAgICBoYW5kbGVSZW1vdmUgPSBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMucHJvcHMub25DbGVhck1lZGlhQ29udHJvbCh0aGlzLmNvbnRyb2xJRCk7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNoYW5nZSgnJyk7XG4gICAgfTtcblxuICAgIG9uU29ydEVuZCA9ICh7IG9sZEluZGV4LCBuZXdJbmRleCB9KSA9PiB7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgbmV3VmFsdWUgPSBhcnJheU1vdmUodmFsdWUsIG9sZEluZGV4LCBuZXdJbmRleCk7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNoYW5nZShuZXdWYWx1ZSk7XG4gICAgfTtcblxuICAgIGdldFZhbGlkYXRlVmFsdWUgPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc011bHRpcGxlKHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IGJhc2VuYW1lKHYpKSA6IGJhc2VuYW1lKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICByZW5kZXJGaWxlTGluayA9IHZhbHVlID0+IHtcbiAgICAgIGNvbnN0IHNpemUgPSBNQVhfRElTUExBWV9MRU5HVEg7XG4gICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA8PSBzaXplKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRleHQgPSBgJHt2YWx1ZS5zdWJzdHJpbmcoMCwgc2l6ZSAvIDIpfVxcdTIwMjYke3ZhbHVlLnN1YnN0cmluZyhcbiAgICAgICAgdmFsdWUubGVuZ3RoIC0gc2l6ZSAvIDIgKyAxLFxuICAgICAgICB2YWx1ZS5sZW5ndGgsXG4gICAgICApfWA7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8RmlsZUxpbmsgaHJlZj17dmFsdWV9IHJlbD1cIm5vb3BlbmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvRmlsZUxpbms+XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZW5kZXJGaWxlTGlua3MgPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICBpZiAoaXNNdWx0aXBsZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8RmlsZUxpbmtzPlxuICAgICAgICAgICAgPEZpbGVMaW5rTGlzdD5cbiAgICAgICAgICAgICAge3ZhbHVlLm1hcCh2YWwgPT4gKFxuICAgICAgICAgICAgICAgIDxsaSBrZXk9e3ZhbH0+e3RoaXMucmVuZGVyRmlsZUxpbmsodmFsKX08L2xpPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRmlsZUxpbmtMaXN0PlxuICAgICAgICAgIDwvRmlsZUxpbmtzPlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDxGaWxlTGlua3M+e3RoaXMucmVuZGVyRmlsZUxpbmsodmFsdWUpfTwvRmlsZUxpbmtzPjtcbiAgICB9O1xuXG4gICAgcmVuZGVySW1hZ2VzID0gKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRBc3NldCwgdmFsdWUsIGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICBpZiAoaXNNdWx0aXBsZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8U29ydGFibGVNdWx0aUltYWdlV3JhcHBlclxuICAgICAgICAgICAgaXRlbXM9e3ZhbHVlfVxuICAgICAgICAgICAgb25Tb3J0RW5kPXt0aGlzLm9uU29ydEVuZH1cbiAgICAgICAgICAgIGdldEFzc2V0PXtnZXRBc3NldH1cbiAgICAgICAgICAgIGZpZWxkPXtmaWVsZH1cbiAgICAgICAgICAgIGF4aXM9XCJ4eVwiXG4gICAgICAgICAgICBsb2NrVG9Db250YWluZXJFZGdlcz17dHJ1ZX1cbiAgICAgICAgICA+PC9Tb3J0YWJsZU11bHRpSW1hZ2VXcmFwcGVyPlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzcmMgPSBnZXRBc3NldCh2YWx1ZSwgZmllbGQpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEltYWdlV3JhcHBlcj5cbiAgICAgICAgICA8SW1hZ2Ugc3JjPXtzcmMgfHwgJyd9IC8+XG4gICAgICAgIDwvSW1hZ2VXcmFwcGVyPlxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyU2VsZWN0aW9uID0gc3ViamVjdCA9PiB7XG4gICAgICBjb25zdCB7IHQgfSA9IHRoaXMucHJvcHM7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIHtmb3JJbWFnZSA/IHRoaXMucmVuZGVySW1hZ2VzKCkgOiBudWxsfVxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7Zm9ySW1hZ2UgPyBudWxsIDogdGhpcy5yZW5kZXJGaWxlTGlua3MoKX1cbiAgICAgICAgICAgIDxGaWxlV2lkZ2V0QnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2hhbmdlfT5cbiAgICAgICAgICAgICAge3QoYGVkaXRvci5lZGl0b3JXaWRnZXRzLiR7c3ViamVjdH0uY2hvb3NlRGlmZmVyZW50YCl9XG4gICAgICAgICAgICA8L0ZpbGVXaWRnZXRCdXR0b24+XG4gICAgICAgICAgICA8RmlsZVdpZGdldEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmhhbmRsZVVybChzdWJqZWN0KX0+XG4gICAgICAgICAgICAgIHt0KGBlZGl0b3IuZWRpdG9yV2lkZ2V0cy4ke3N1YmplY3R9LnJlcGxhY2VVcmxgKX1cbiAgICAgICAgICAgIDwvRmlsZVdpZGdldEJ1dHRvbj5cbiAgICAgICAgICAgIDxGaWxlV2lkZ2V0QnV0dG9uUmVtb3ZlIG9uQ2xpY2s9e3RoaXMuaGFuZGxlUmVtb3ZlfT5cbiAgICAgICAgICAgICAge3QoYGVkaXRvci5lZGl0b3JXaWRnZXRzLiR7c3ViamVjdH0ucmVtb3ZlYCl9XG4gICAgICAgICAgICA8L0ZpbGVXaWRnZXRCdXR0b25SZW1vdmU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyTm9TZWxlY3Rpb24gPSBzdWJqZWN0ID0+IHtcbiAgICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5wcm9wcztcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPEZpbGVXaWRnZXRCdXR0b24gb25DbGljaz17dGhpcy5oYW5kbGVDaGFuZ2V9PlxuICAgICAgICAgICAge3QoYGVkaXRvci5lZGl0b3JXaWRnZXRzLiR7c3ViamVjdH0uY2hvb3NlYCl9XG4gICAgICAgICAgPC9GaWxlV2lkZ2V0QnV0dG9uPlxuICAgICAgICAgIDxGaWxlV2lkZ2V0QnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVXJsKHN1YmplY3QpfT5cbiAgICAgICAgICAgIHt0KGBlZGl0b3IuZWRpdG9yV2lkZ2V0cy4ke3N1YmplY3R9LmNob29zZVVybGApfVxuICAgICAgICAgIDwvRmlsZVdpZGdldEJ1dHRvbj5cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCB7IHZhbHVlLCBjbGFzc05hbWVXcmFwcGVyIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3Qgc3ViamVjdCA9IGZvckltYWdlID8gJ2ltYWdlJyA6ICdmaWxlJztcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZVdyYXBwZXJ9PlxuICAgICAgICAgIDxzcGFuPnt2YWx1ZSA/IHRoaXMucmVuZGVyU2VsZWN0aW9uKHN1YmplY3QpIDogdGhpcy5yZW5kZXJOb1NlbGVjdGlvbihzdWJqZWN0KX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileLinks = (0, _styledBase.default)("div", {
  target: "e1awjdnj3",
  label: "FileLinks"
})(process.env.NODE_ENV === "production" ? {
  name: "1upilqn",
  styles: "margin-bottom:12px;"
} : {
  name: "1upilqn",
  styles: "margin-bottom:12px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileLinkList = (0, _styledBase.default)("ul", {
  target: "e1awjdnj4",
  label: "FileLinkList"
})(process.env.NODE_ENV === "production" ? {
  name: "155za0w",
  styles: "list-style-type:none;"
} : {
  name: "155za0w",
  styles: "list-style-type:none;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileWidgetButton = (0, _styledBase.default)("button", {
  target: "e1awjdnj5",
  label: "FileWidgetButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.components.badge, ";margin-bottom:12px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93aXRoRmlsZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUZzQyIsImZpbGUiOiIuLi8uLi9zcmMvd2l0aEZpbGVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBNYXAsIExpc3QgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgb25jZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgdXVpZCBmcm9tICd1dWlkL3Y0JztcbmltcG9ydCB7IG9uZUxpbmUgfSBmcm9tICdjb21tb24tdGFncyc7XG5pbXBvcnQgeyBsZW5ndGhzLCBjb21wb25lbnRzLCBidXR0b25zLCBib3JkZXJzLCBlZmZlY3RzLCBzaGFkb3dzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBiYXNlbmFtZSB9IGZyb20gJ25ldGxpZnktY21zLWxpYi11dGlsJztcbmltcG9ydCB7IFNvcnRhYmxlQ29udGFpbmVyLCBTb3J0YWJsZUVsZW1lbnQgfSBmcm9tICdyZWFjdC1zb3J0YWJsZS1ob2MnO1xuaW1wb3J0IGFycmF5TW92ZSBmcm9tICdhcnJheS1tb3ZlJztcblxuY29uc3QgTUFYX0RJU1BMQVlfTEVOR1RIID0gNTA7XG5cbmNvbnN0IEltYWdlV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGZsZXgtYmFzaXM6IDE1NXB4O1xuICB3aWR0aDogMTU1cHg7XG4gIGhlaWdodDogMTAwcHg7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgYm9yZGVyOiAke2JvcmRlcnMudGV4dEZpZWxkfTtcbiAgYm9yZGVyLXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gICR7ZWZmZWN0cy5jaGVja2VyYm9hcmR9O1xuICAke3NoYWRvd3MuaW5zZXR9O1xuICBjdXJzb3I6ICR7cHJvcHMgPT4gKHByb3BzLnNvcnRhYmxlID8gJ3BvaW50ZXInIDogJ2F1dG8nKX07XG5gO1xuXG5jb25zdCBTdHlsZWRJbWFnZSA9IHN0eWxlZC5pbWdgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG9iamVjdC1maXQ6IGNvbnRhaW47XG5gO1xuXG5mdW5jdGlvbiBJbWFnZShwcm9wcykge1xuICByZXR1cm4gPFN0eWxlZEltYWdlIHJvbGU9XCJwcmVzZW50YXRpb25cIiB7Li4ucHJvcHN9IC8+O1xufVxuXG5jb25zdCBTb3J0YWJsZUltYWdlID0gU29ydGFibGVFbGVtZW50KCh7IGl0ZW1WYWx1ZSwgZ2V0QXNzZXQsIGZpZWxkIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8SW1hZ2VXcmFwcGVyIHNvcnRhYmxlPlxuICAgICAgPEltYWdlIHNyYz17Z2V0QXNzZXQoaXRlbVZhbHVlLCBmaWVsZCkgfHwgJyd9IC8+XG4gICAgPC9JbWFnZVdyYXBwZXI+XG4gICk7XG59KTtcblxuY29uc3QgU29ydGFibGVNdWx0aUltYWdlV3JhcHBlciA9IFNvcnRhYmxlQ29udGFpbmVyKCh7IGl0ZW1zLCBnZXRBc3NldCwgZmllbGQgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17Y3NzYFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICBgfVxuICAgID5cbiAgICAgIHtpdGVtcy5tYXAoKGl0ZW1WYWx1ZSwgaW5kZXgpID0+IChcbiAgICAgICAgPFNvcnRhYmxlSW1hZ2VcbiAgICAgICAgICBrZXk9e2BpdGVtLSR7aXRlbVZhbHVlfWB9XG4gICAgICAgICAgaW5kZXg9e2luZGV4fVxuICAgICAgICAgIGl0ZW1WYWx1ZT17aXRlbVZhbHVlfVxuICAgICAgICAgIGdldEFzc2V0PXtnZXRBc3NldH1cbiAgICAgICAgICBmaWVsZD17ZmllbGR9XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn0pO1xuXG5jb25zdCBGaWxlTGluayA9IHN0eWxlZC5hYFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBjb2xvcjogaW5oZXJpdDtcblxuICAmOmhvdmVyLFxuICAmOmFjdGl2ZSxcbiAgJjpmb2N1cyB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIH1cbmA7XG5cbmNvbnN0IEZpbGVMaW5rcyA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi1ib3R0b206IDEycHg7XG5gO1xuXG5jb25zdCBGaWxlTGlua0xpc3QgPSBzdHlsZWQudWxgXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbmA7XG5cbmNvbnN0IEZpbGVXaWRnZXRCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtjb21wb25lbnRzLmJhZGdlfTtcbiAgbWFyZ2luLWJvdHRvbTogMTJweDtcbmA7XG5cbmNvbnN0IEZpbGVXaWRnZXRCdXR0b25SZW1vdmUgPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtjb21wb25lbnRzLmJhZGdlRGFuZ2VyfTtcbmA7XG5cbmZ1bmN0aW9uIGlzTXVsdGlwbGUodmFsdWUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IExpc3QuaXNMaXN0KHZhbHVlKTtcbn1cblxuY29uc3Qgd2FybkRlcHJlY2F0ZWRPcHRpb25zID0gb25jZShmaWVsZCA9PlxuICBjb25zb2xlLndhcm4ob25lTGluZWBcbiAgTmV0bGlmeSBDTVMgY29uZmlnOiAke2ZpZWxkLmdldCgnbmFtZScpfSBmaWVsZDogcHJvcGVydHkgXCJvcHRpb25zXCIgaGFzIGJlZW4gZGVwcmVjYXRlZCBmb3IgdGhlXG4gICR7ZmllbGQuZ2V0KCd3aWRnZXQnKX0gd2lkZ2V0IGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS4gUmF0aGVyIHRoYW5cbiAgXFxgZmllbGQub3B0aW9ucy5tZWRpYV9saWJyYXJ5XFxgLCBhcHBseSBtZWRpYSBsaWJyYXJ5IG9wdGlvbnMgZm9yIHRoaXMgd2lkZ2V0IHVuZGVyXG4gIFxcYGZpZWxkLm1lZGlhX2xpYnJhcnlcXGAuXG5gKSxcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdpdGhGaWxlQ29udHJvbCh7IGZvckltYWdlIH0gPSB7fSkge1xuICByZXR1cm4gY2xhc3MgRmlsZUNvbnRyb2wgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICBmaWVsZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgICAgZ2V0QXNzZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBtZWRpYVBhdGhzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgICBvbkFkZEFzc2V0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBvblJlbW92ZUluc2VydGVkTWVkaWE6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBvbk9wZW5NZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBvbkNsZWFyTWVkaWFDb250cm9sOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgb25SZW1vdmVNZWRpYUNvbnRyb2w6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBjbGFzc05hbWVXcmFwcGVyOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICAgICAgICBJbW11dGFibGVQcm9wVHlwZXMubGlzdE9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICAgICAgXSksXG4gICAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIH07XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgdmFsdWU6ICcnLFxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgdGhpcy5jb250cm9sSUQgPSB1dWlkKCk7XG4gICAgfVxuXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgLyoqXG4gICAgICAgKiBBbHdheXMgdXBkYXRlIGlmIHRoZSB2YWx1ZSBvciBnZXRBc3NldCBjaGFuZ2VzLlxuICAgICAgICovXG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlIHx8IHRoaXMucHJvcHMuZ2V0QXNzZXQgIT09IG5leHRQcm9wcy5nZXRBc3NldCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBJZiB0aGVyZSBpcyBhIG1lZGlhIHBhdGggZm9yIHRoaXMgY29udHJvbCBpbiB0aGUgc3RhdGUgb2JqZWN0LCBhbmQgdGhhdFxuICAgICAgICogcGF0aCBpcyBkaWZmZXJlbnQgdGhhbiB0aGUgdmFsdWUgaW4gYG5leHRQcm9wc2AsIHVwZGF0ZS5cbiAgICAgICAqL1xuICAgICAgY29uc3QgbWVkaWFQYXRoID0gbmV4dFByb3BzLm1lZGlhUGF0aHMuZ2V0KHRoaXMuY29udHJvbElEKTtcbiAgICAgIGlmIChtZWRpYVBhdGggJiYgbmV4dFByb3BzLnZhbHVlICE9PSBtZWRpYVBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICBjb25zdCB7IG1lZGlhUGF0aHMsIHZhbHVlLCBvblJlbW92ZUluc2VydGVkTWVkaWEsIG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgbWVkaWFQYXRoID0gbWVkaWFQYXRocy5nZXQodGhpcy5jb250cm9sSUQpO1xuICAgICAgaWYgKG1lZGlhUGF0aCAmJiBtZWRpYVBhdGggIT09IHZhbHVlKSB7XG4gICAgICAgIG9uQ2hhbmdlKG1lZGlhUGF0aCk7XG4gICAgICB9IGVsc2UgaWYgKG1lZGlhUGF0aCAmJiBtZWRpYVBhdGggPT09IHZhbHVlKSB7XG4gICAgICAgIG9uUmVtb3ZlSW5zZXJ0ZWRNZWRpYSh0aGlzLmNvbnRyb2xJRCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnByb3BzLm9uUmVtb3ZlTWVkaWFDb250cm9sKHRoaXMuY29udHJvbElEKTtcbiAgICB9XG5cbiAgICBoYW5kbGVDaGFuZ2UgPSBlID0+IHtcbiAgICAgIGNvbnN0IHsgZmllbGQsIG9uT3Blbk1lZGlhTGlicmFyeSwgdmFsdWUgfSA9IHRoaXMucHJvcHM7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBsZXQgbWVkaWFMaWJyYXJ5RmllbGRPcHRpb25zO1xuXG4gICAgICAvKipcbiAgICAgICAqIGBvcHRpb25zYCBoYXNoIGFzIGEgZ2VuZXJhbCBmaWVsZCBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkLCBvbmx5IHVzZWRcbiAgICAgICAqIHdoZW4gZXh0ZXJuYWwgbWVkaWEgbGlicmFyaWVzIHdlcmUgZmlyc3QgaW50cm9kdWNlZC4gTm90IHRvIGJlXG4gICAgICAgKiBjb25mdXNlZCB3aXRoIGBvcHRpb25zYCBmb3IgdGhlIHNlbGVjdCB3aWRnZXQsIHdoaWNoIHNlcnZlcyBhIGRpZmZlcmVudFxuICAgICAgICogcHVycG9zZS5cbiAgICAgICAqL1xuICAgICAgaWYgKGZpZWxkLmhhc0luKFsnb3B0aW9ucycsICdtZWRpYV9saWJyYXJ5J10pKSB7XG4gICAgICAgIHdhcm5EZXByZWNhdGVkT3B0aW9ucyhmaWVsZCk7XG4gICAgICAgIG1lZGlhTGlicmFyeUZpZWxkT3B0aW9ucyA9IGZpZWxkLmdldEluKFsnb3B0aW9ucycsICdtZWRpYV9saWJyYXJ5J10sIE1hcCgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lZGlhTGlicmFyeUZpZWxkT3B0aW9ucyA9IGZpZWxkLmdldCgnbWVkaWFfbGlicmFyeScsIE1hcCgpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uT3Blbk1lZGlhTGlicmFyeSh7XG4gICAgICAgIGNvbnRyb2xJRDogdGhpcy5jb250cm9sSUQsXG4gICAgICAgIGZvckltYWdlLFxuICAgICAgICBwcml2YXRlVXBsb2FkOiBmaWVsZC5nZXQoJ3ByaXZhdGUnKSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGFsbG93TXVsdGlwbGU6ICEhbWVkaWFMaWJyYXJ5RmllbGRPcHRpb25zLmdldCgnYWxsb3dfbXVsdGlwbGUnLCB0cnVlKSxcbiAgICAgICAgY29uZmlnOiBtZWRpYUxpYnJhcnlGaWVsZE9wdGlvbnMuZ2V0KCdjb25maWcnKSxcbiAgICAgICAgZmllbGQsXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaGFuZGxlVXJsID0gc3ViamVjdCA9PiBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgY29uc3QgdXJsID0gd2luZG93LnByb21wdCh0aGlzLnByb3BzLnQoYGVkaXRvci5lZGl0b3JXaWRnZXRzLiR7c3ViamVjdH0ucHJvbXB0VXJsYCkpO1xuXG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNoYW5nZSh1cmwpO1xuICAgIH07XG5cbiAgICBoYW5kbGVSZW1vdmUgPSBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMucHJvcHMub25DbGVhck1lZGlhQ29udHJvbCh0aGlzLmNvbnRyb2xJRCk7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNoYW5nZSgnJyk7XG4gICAgfTtcblxuICAgIG9uU29ydEVuZCA9ICh7IG9sZEluZGV4LCBuZXdJbmRleCB9KSA9PiB7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgbmV3VmFsdWUgPSBhcnJheU1vdmUodmFsdWUsIG9sZEluZGV4LCBuZXdJbmRleCk7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5vbkNoYW5nZShuZXdWYWx1ZSk7XG4gICAgfTtcblxuICAgIGdldFZhbGlkYXRlVmFsdWUgPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc011bHRpcGxlKHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IGJhc2VuYW1lKHYpKSA6IGJhc2VuYW1lKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICByZW5kZXJGaWxlTGluayA9IHZhbHVlID0+IHtcbiAgICAgIGNvbnN0IHNpemUgPSBNQVhfRElTUExBWV9MRU5HVEg7XG4gICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA8PSBzaXplKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRleHQgPSBgJHt2YWx1ZS5zdWJzdHJpbmcoMCwgc2l6ZSAvIDIpfVxcdTIwMjYke3ZhbHVlLnN1YnN0cmluZyhcbiAgICAgICAgdmFsdWUubGVuZ3RoIC0gc2l6ZSAvIDIgKyAxLFxuICAgICAgICB2YWx1ZS5sZW5ndGgsXG4gICAgICApfWA7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8RmlsZUxpbmsgaHJlZj17dmFsdWV9IHJlbD1cIm5vb3BlbmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvRmlsZUxpbms+XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZW5kZXJGaWxlTGlua3MgPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICBpZiAoaXNNdWx0aXBsZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8RmlsZUxpbmtzPlxuICAgICAgICAgICAgPEZpbGVMaW5rTGlzdD5cbiAgICAgICAgICAgICAge3ZhbHVlLm1hcCh2YWwgPT4gKFxuICAgICAgICAgICAgICAgIDxsaSBrZXk9e3ZhbH0+e3RoaXMucmVuZGVyRmlsZUxpbmsodmFsKX08L2xpPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRmlsZUxpbmtMaXN0PlxuICAgICAgICAgIDwvRmlsZUxpbmtzPlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDxGaWxlTGlua3M+e3RoaXMucmVuZGVyRmlsZUxpbmsodmFsdWUpfTwvRmlsZUxpbmtzPjtcbiAgICB9O1xuXG4gICAgcmVuZGVySW1hZ2VzID0gKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRBc3NldCwgdmFsdWUsIGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICBpZiAoaXNNdWx0aXBsZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8U29ydGFibGVNdWx0aUltYWdlV3JhcHBlclxuICAgICAgICAgICAgaXRlbXM9e3ZhbHVlfVxuICAgICAgICAgICAgb25Tb3J0RW5kPXt0aGlzLm9uU29ydEVuZH1cbiAgICAgICAgICAgIGdldEFzc2V0PXtnZXRBc3NldH1cbiAgICAgICAgICAgIGZpZWxkPXtmaWVsZH1cbiAgICAgICAgICAgIGF4aXM9XCJ4eVwiXG4gICAgICAgICAgICBsb2NrVG9Db250YWluZXJFZGdlcz17dHJ1ZX1cbiAgICAgICAgICA+PC9Tb3J0YWJsZU11bHRpSW1hZ2VXcmFwcGVyPlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzcmMgPSBnZXRBc3NldCh2YWx1ZSwgZmllbGQpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEltYWdlV3JhcHBlcj5cbiAgICAgICAgICA8SW1hZ2Ugc3JjPXtzcmMgfHwgJyd9IC8+XG4gICAgICAgIDwvSW1hZ2VXcmFwcGVyPlxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyU2VsZWN0aW9uID0gc3ViamVjdCA9PiB7XG4gICAgICBjb25zdCB7IHQgfSA9IHRoaXMucHJvcHM7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIHtmb3JJbWFnZSA/IHRoaXMucmVuZGVySW1hZ2VzKCkgOiBudWxsfVxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7Zm9ySW1hZ2UgPyBudWxsIDogdGhpcy5yZW5kZXJGaWxlTGlua3MoKX1cbiAgICAgICAgICAgIDxGaWxlV2lkZ2V0QnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2hhbmdlfT5cbiAgICAgICAgICAgICAge3QoYGVkaXRvci5lZGl0b3JXaWRnZXRzLiR7c3ViamVjdH0uY2hvb3NlRGlmZmVyZW50YCl9XG4gICAgICAgICAgICA8L0ZpbGVXaWRnZXRCdXR0b24+XG4gICAgICAgICAgICA8RmlsZVdpZGdldEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmhhbmRsZVVybChzdWJqZWN0KX0+XG4gICAgICAgICAgICAgIHt0KGBlZGl0b3IuZWRpdG9yV2lkZ2V0cy4ke3N1YmplY3R9LnJlcGxhY2VVcmxgKX1cbiAgICAgICAgICAgIDwvRmlsZVdpZGdldEJ1dHRvbj5cbiAgICAgICAgICAgIDxGaWxlV2lkZ2V0QnV0dG9uUmVtb3ZlIG9uQ2xpY2s9e3RoaXMuaGFuZGxlUmVtb3ZlfT5cbiAgICAgICAgICAgICAge3QoYGVkaXRvci5lZGl0b3JXaWRnZXRzLiR7c3ViamVjdH0ucmVtb3ZlYCl9XG4gICAgICAgICAgICA8L0ZpbGVXaWRnZXRCdXR0b25SZW1vdmU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyTm9TZWxlY3Rpb24gPSBzdWJqZWN0ID0+IHtcbiAgICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5wcm9wcztcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPEZpbGVXaWRnZXRCdXR0b24gb25DbGljaz17dGhpcy5oYW5kbGVDaGFuZ2V9PlxuICAgICAgICAgICAge3QoYGVkaXRvci5lZGl0b3JXaWRnZXRzLiR7c3ViamVjdH0uY2hvb3NlYCl9XG4gICAgICAgICAgPC9GaWxlV2lkZ2V0QnV0dG9uPlxuICAgICAgICAgIDxGaWxlV2lkZ2V0QnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVXJsKHN1YmplY3QpfT5cbiAgICAgICAgICAgIHt0KGBlZGl0b3IuZWRpdG9yV2lkZ2V0cy4ke3N1YmplY3R9LmNob29zZVVybGApfVxuICAgICAgICAgIDwvRmlsZVdpZGdldEJ1dHRvbj5cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCB7IHZhbHVlLCBjbGFzc05hbWVXcmFwcGVyIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3Qgc3ViamVjdCA9IGZvckltYWdlID8gJ2ltYWdlJyA6ICdmaWxlJztcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZVdyYXBwZXJ9PlxuICAgICAgICAgIDxzcGFuPnt2YWx1ZSA/IHRoaXMucmVuZGVyU2VsZWN0aW9uKHN1YmplY3QpIDogdGhpcy5yZW5kZXJOb1NlbGVjdGlvbihzdWJqZWN0KX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG4iXX0= */"));
const FileWidgetButtonRemove = (0, _styledBase.default)("button", {
  target: "e1awjdnj6",
  label: "FileWidgetButtonRemove"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.components.badgeDanger, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

function isMultiple(value) {
  return Array.isArray(value) || _immutable.List.isList(value);
}

const warnDeprecatedOptions = (0, _once2.default)(field => console.warn((0, _commonTags.oneLine)`
  Netlify CMS config: ${field.get('name')} field: property "options" has been deprecated for the
  ${field.get('widget')} widget and will be removed in the next major release. Rather than
  \`field.options.media_library\`, apply media library options for this widget under
  \`field.media_library\`.
`));

function withFileControl({
  forImage
} = {}) {
  var _class, _temp;

  return _temp = _class = class FileControl extends _react.default.Component {
    constructor(props) {
      super(props);

      _defineProperty(this, "handleChange", e => {
        const {
          field,
          onOpenMediaLibrary,
          value
        } = this.props;
        e.preventDefault();
        let mediaLibraryFieldOptions;
        /**
         * `options` hash as a general field property is deprecated, only used
         * when external media libraries were first introduced. Not to be
         * confused with `options` for the select widget, which serves a different
         * purpose.
         */

        if (field.hasIn(['options', 'media_library'])) {
          warnDeprecatedOptions(field);
          mediaLibraryFieldOptions = field.getIn(['options', 'media_library'], (0, _immutable.Map)());
        } else {
          mediaLibraryFieldOptions = field.get('media_library', (0, _immutable.Map)());
        }

        return onOpenMediaLibrary({
          controlID: this.controlID,
          forImage,
          privateUpload: field.get('private'),
          value,
          allowMultiple: !!mediaLibraryFieldOptions.get('allow_multiple', true),
          config: mediaLibraryFieldOptions.get('config'),
          field
        });
      });

      _defineProperty(this, "handleUrl", subject => e => {
        e.preventDefault();
        const url = window.prompt(this.props.t(`editor.editorWidgets.${subject}.promptUrl`));
        return this.props.onChange(url);
      });

      _defineProperty(this, "handleRemove", e => {
        e.preventDefault();
        this.props.onClearMediaControl(this.controlID);
        return this.props.onChange('');
      });

      _defineProperty(this, "onSortEnd", ({
        oldIndex,
        newIndex
      }) => {
        const {
          value
        } = this.props;
        const newValue = (0, _arrayMove.default)(value, oldIndex, newIndex);
        return this.props.onChange(newValue);
      });

      _defineProperty(this, "getValidateValue", () => {
        const {
          value
        } = this.props;

        if (value) {
          return isMultiple(value) ? value.map(v => (0, _netlifyCmsLibUtil.basename)(v)) : (0, _netlifyCmsLibUtil.basename)(value);
        }

        return value;
      });

      _defineProperty(this, "renderFileLink", value => {
        const size = MAX_DISPLAY_LENGTH;

        if (!value || value.length <= size) {
          return value;
        }

        const text = `${value.substring(0, size / 2)}\u2026${value.substring(value.length - size / 2 + 1, value.length)}`;
        return (0, _core.jsx)(FileLink, {
          href: value,
          rel: "noopener",
          target: "_blank"
        }, text);
      });

      _defineProperty(this, "renderFileLinks", () => {
        const {
          value
        } = this.props;

        if (isMultiple(value)) {
          return (0, _core.jsx)(FileLinks, null, (0, _core.jsx)(FileLinkList, null, value.map(val => (0, _core.jsx)("li", {
            key: val
          }, this.renderFileLink(val)))));
        }

        return (0, _core.jsx)(FileLinks, null, this.renderFileLink(value));
      });

      _defineProperty(this, "renderImages", () => {
        const {
          getAsset,
          value,
          field
        } = this.props;

        if (isMultiple(value)) {
          return (0, _core.jsx)(SortableMultiImageWrapper, {
            items: value,
            onSortEnd: this.onSortEnd,
            getAsset: getAsset,
            field: field,
            axis: "xy",
            lockToContainerEdges: true
          });
        }

        const src = getAsset(value, field);
        return (0, _core.jsx)(ImageWrapper, null, (0, _core.jsx)(Image, {
          src: src || ''
        }));
      });

      _defineProperty(this, "renderSelection", subject => {
        const {
          t
        } = this.props;
        return (0, _core.jsx)("div", null, forImage ? this.renderImages() : null, (0, _core.jsx)("div", null, forImage ? null : this.renderFileLinks(), (0, _core.jsx)(FileWidgetButton, {
          onClick: this.handleChange
        }, t(`editor.editorWidgets.${subject}.chooseDifferent`)), (0, _core.jsx)(FileWidgetButton, {
          onClick: this.handleUrl(subject)
        }, t(`editor.editorWidgets.${subject}.replaceUrl`)), (0, _core.jsx)(FileWidgetButtonRemove, {
          onClick: this.handleRemove
        }, t(`editor.editorWidgets.${subject}.remove`))));
      });

      _defineProperty(this, "renderNoSelection", subject => {
        const {
          t
        } = this.props;
        return (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(FileWidgetButton, {
          onClick: this.handleChange
        }, t(`editor.editorWidgets.${subject}.choose`)), (0, _core.jsx)(FileWidgetButton, {
          onClick: this.handleUrl(subject)
        }, t(`editor.editorWidgets.${subject}.chooseUrl`)));
      });

      this.controlID = (0, _v.default)();
    }

    shouldComponentUpdate(nextProps) {
      /**
       * Always update if the value or getAsset changes.
       */
      if (this.props.value !== nextProps.value || this.props.getAsset !== nextProps.getAsset) {
        return true;
      }
      /**
       * If there is a media path for this control in the state object, and that
       * path is different than the value in `nextProps`, update.
       */


      const mediaPath = nextProps.mediaPaths.get(this.controlID);

      if (mediaPath && nextProps.value !== mediaPath) {
        return true;
      }

      return false;
    }

    componentDidUpdate() {
      const {
        mediaPaths,
        value,
        onRemoveInsertedMedia,
        onChange
      } = this.props;
      const mediaPath = mediaPaths.get(this.controlID);

      if (mediaPath && mediaPath !== value) {
        onChange(mediaPath);
      } else if (mediaPath && mediaPath === value) {
        onRemoveInsertedMedia(this.controlID);
      }
    }

    componentWillUnmount() {
      this.props.onRemoveMediaControl(this.controlID);
    }

    render() {
      const {
        value,
        classNameWrapper
      } = this.props;
      const subject = forImage ? 'image' : 'file';
      return (0, _core.jsx)("div", {
        className: classNameWrapper
      }, (0, _core.jsx)("span", null, value ? this.renderSelection(subject) : this.renderNoSelection(subject)));
    }

  }, _defineProperty(_class, "propTypes", {
    field: _propTypes.default.object.isRequired,
    getAsset: _propTypes.default.func.isRequired,
    mediaPaths: _reactImmutableProptypes.default.map.isRequired,
    onAddAsset: _propTypes.default.func.isRequired,
    onChange: _propTypes.default.func.isRequired,
    onRemoveInsertedMedia: _propTypes.default.func.isRequired,
    onOpenMediaLibrary: _propTypes.default.func.isRequired,
    onClearMediaControl: _propTypes.default.func.isRequired,
    onRemoveMediaControl: _propTypes.default.func.isRequired,
    classNameWrapper: _propTypes.default.string.isRequired,
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string), _reactImmutableProptypes.default.listOf(_propTypes.default.string)]),
    t: _propTypes.default.func.isRequired
  }), _defineProperty(_class, "defaultProps", {
    value: ''
  }), _temp;
}